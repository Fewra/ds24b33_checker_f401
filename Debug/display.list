
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d54  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08004ef4  08004ef4  00005ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005064  08005064  00007090  2**0
                  CONTENTS
  4 .ARM          00000008  08005064  08005064  00006064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800506c  0800506c  00007090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800506c  0800506c  0000606c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005070  08005070  00006070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005074  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000090  08005104  00007090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08005104  000072a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d288  00000000  00000000  000070c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002367  00000000  00000000  00014348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  000166b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d5  00000000  00000000  00017228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173e1  00000000  00000000  00017afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc2c  00000000  00000000  0002eede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008976c  00000000  00000000  0003eb0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8276  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037dc  00000000  00000000  000c82bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000cba98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004edc 	.word	0x08004edc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08004edc 	.word	0x08004edc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ExecuteCommand>:
static DS24B33_Command copyScratch = {.code = 0x55, .rxBytesNum = 0, .txBytesNum = 3};
static DS24B33_Command readMemory = {.code = 0xF0, .txBytesNum = 2};
static DS24B33_Command readRom = {.code = 0x33, .rxBytesNum = 8, .txBytesNum = 0};

static void ExecuteCommand(UART_HandleTypeDef *huart, DS24B33_Command command, uint8_t *data)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b087      	sub	sp, #28
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	1d38      	adds	r0, r7, #4
 800058a:	e880 0006 	stmia.w	r0, {r1, r2}
 800058e:	603b      	str	r3, [r7, #0]
	OneWire_ProcessByte(huart, command.code);
 8000590:	793b      	ldrb	r3, [r7, #4]
 8000592:	4619      	mov	r1, r3
 8000594:	68f8      	ldr	r0, [r7, #12]
 8000596:	f001 f9be 	bl	8001916 <OneWire_ProcessByte>

	for (uint8_t i = 0; i < command.txBytesNum; i++)
 800059a:	2300      	movs	r3, #0
 800059c:	75fb      	strb	r3, [r7, #23]
 800059e:	e00a      	b.n	80005b6 <ExecuteCommand+0x36>
	{
		OneWire_ProcessByte(huart, data[i]);
 80005a0:	7dfb      	ldrb	r3, [r7, #23]
 80005a2:	683a      	ldr	r2, [r7, #0]
 80005a4:	4413      	add	r3, r2
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4619      	mov	r1, r3
 80005aa:	68f8      	ldr	r0, [r7, #12]
 80005ac:	f001 f9b3 	bl	8001916 <OneWire_ProcessByte>
	for (uint8_t i = 0; i < command.txBytesNum; i++)
 80005b0:	7dfb      	ldrb	r3, [r7, #23]
 80005b2:	3301      	adds	r3, #1
 80005b4:	75fb      	strb	r3, [r7, #23]
 80005b6:	7dfb      	ldrb	r3, [r7, #23]
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	893b      	ldrh	r3, [r7, #8]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d3ef      	bcc.n	80005a0 <ExecuteCommand+0x20>
	}

	for (uint8_t i = 0; i < command.rxBytesNum; i++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	75bb      	strb	r3, [r7, #22]
 80005c4:	e00b      	b.n	80005de <ExecuteCommand+0x5e>
	{
		data[i] = OneWire_ProcessByte(huart, 0xFF);
 80005c6:	7dbb      	ldrb	r3, [r7, #22]
 80005c8:	683a      	ldr	r2, [r7, #0]
 80005ca:	18d4      	adds	r4, r2, r3
 80005cc:	21ff      	movs	r1, #255	@ 0xff
 80005ce:	68f8      	ldr	r0, [r7, #12]
 80005d0:	f001 f9a1 	bl	8001916 <OneWire_ProcessByte>
 80005d4:	4603      	mov	r3, r0
 80005d6:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < command.rxBytesNum; i++)
 80005d8:	7dbb      	ldrb	r3, [r7, #22]
 80005da:	3301      	adds	r3, #1
 80005dc:	75bb      	strb	r3, [r7, #22]
 80005de:	7dbb      	ldrb	r3, [r7, #22]
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d3ee      	bcc.n	80005c6 <ExecuteCommand+0x46>
	}


}
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	371c      	adds	r7, #28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd90      	pop	{r4, r7, pc}
	...

080005f4 <WriteScratchpad>:

void WriteScratchpad(UART_HandleTypeDef *huart, uint8_t *data, size_t size)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
	writeScratch.txBytesNum = size;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	b29a      	uxth	r2, r3
 8000604:	4b07      	ldr	r3, [pc, #28]	@ (8000624 <WriteScratchpad+0x30>)
 8000606:	809a      	strh	r2, [r3, #4]
	ExecuteCommand(huart, writeScratch, data);
 8000608:	4a06      	ldr	r2, [pc, #24]	@ (8000624 <WriteScratchpad+0x30>)
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	ca06      	ldmia	r2, {r1, r2}
 800060e:	68f8      	ldr	r0, [r7, #12]
 8000610:	f7ff ffb6 	bl	8000580 <ExecuteCommand>
	OneWire_Reset(huart);
 8000614:	68f8      	ldr	r0, [r7, #12]
 8000616:	f001 f92f 	bl	8001878 <OneWire_Reset>
}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000000 	.word	0x20000000

08000628 <ReadScratchpad>:

void ReadScratchpad(UART_HandleTypeDef *huart, uint8_t *data)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
	ExecuteCommand(huart, readScratch, data);
 8000632:	4a06      	ldr	r2, [pc, #24]	@ (800064c <ReadScratchpad+0x24>)
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	ca06      	ldmia	r2, {r1, r2}
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f7ff ffa1 	bl	8000580 <ExecuteCommand>
	OneWire_Reset(huart);
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f001 f91a 	bl	8001878 <OneWire_Reset>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000008 	.word	0x20000008

08000650 <CopyScratchpad>:

void CopyScratchpad(UART_HandleTypeDef *huart, uint8_t *data)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
	ExecuteCommand(huart, copyScratch, data);
 800065a:	4a0c      	ldr	r2, [pc, #48]	@ (800068c <CopyScratchpad+0x3c>)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	ca06      	ldmia	r2, {r1, r2}
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ff8d 	bl	8000580 <ExecuteCommand>

	uint32_t t = HAL_GetTick();
 8000666:	f001 fbdd 	bl	8001e24 <HAL_GetTick>
 800066a:	60f8      	str	r0, [r7, #12]
	while (HAL_GetTick() - t < 7) {}
 800066c:	bf00      	nop
 800066e:	f001 fbd9 	bl	8001e24 <HAL_GetTick>
 8000672:	4602      	mov	r2, r0
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	2b06      	cmp	r3, #6
 800067a:	d9f8      	bls.n	800066e <CopyScratchpad+0x1e>

	OneWire_Reset(huart);
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f001 f8fb 	bl	8001878 <OneWire_Reset>
}
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000010 	.word	0x20000010

08000690 <ReadMemory>:

void ReadMemory(UART_HandleTypeDef *huart, uint8_t *data, size_t size)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
	readMemory.rxBytesNum = size;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <ReadMemory+0x30>)
 80006a2:	805a      	strh	r2, [r3, #2]
	ExecuteCommand(huart, readMemory, data);
 80006a4:	4a06      	ldr	r2, [pc, #24]	@ (80006c0 <ReadMemory+0x30>)
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	ca06      	ldmia	r2, {r1, r2}
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f7ff ff68 	bl	8000580 <ExecuteCommand>
	OneWire_Reset(huart);
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	f001 f8e1 	bl	8001878 <OneWire_Reset>
}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000018 	.word	0x20000018

080006c4 <ReadRom>:
void ReadRom(UART_HandleTypeDef *huart, uint8_t *data)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
	ExecuteCommand(huart, readRom, data);
 80006ce:	4a05      	ldr	r2, [pc, #20]	@ (80006e4 <ReadRom+0x20>)
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	ca06      	ldmia	r2, {r1, r2}
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ff53 	bl	8000580 <ExecuteCommand>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000020 	.word	0x20000020

080006e8 <write_data_toMem>:
 */

#include "ds24b33_manage.h"

static void write_data_toMem(UART_HandleTypeDef *huart, uint8_t *data, size_t size, uint16_t addr)
{
 80006e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006ec:	b097      	sub	sp, #92	@ 0x5c
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	60f8      	str	r0, [r7, #12]
 80006f2:	60b9      	str	r1, [r7, #8]
 80006f4:	607a      	str	r2, [r7, #4]
 80006f6:	807b      	strh	r3, [r7, #2]
 80006f8:	466b      	mov	r3, sp
 80006fa:	461e      	mov	r6, r3
	uint8_t TA1 = (addr & 0x00FF);
 80006fc:	887b      	ldrh	r3, [r7, #2]
 80006fe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint8_t TA2 = ((addr & 0xFF00)>>8);
 8000702:	887b      	ldrh	r3, [r7, #2]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	b29b      	uxth	r3, r3
 8000708:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

	uint8_t dataRom[8];

	uint8_t writeScratch_data[size+2];
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	1c99      	adds	r1, r3, #2
 8000710:	460b      	mov	r3, r1
 8000712:	3b01      	subs	r3, #1
 8000714:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000716:	2300      	movs	r3, #0
 8000718:	4688      	mov	r8, r1
 800071a:	4699      	mov	r9, r3
 800071c:	f04f 0200 	mov.w	r2, #0
 8000720:	f04f 0300 	mov.w	r3, #0
 8000724:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000728:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800072c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000730:	2300      	movs	r3, #0
 8000732:	460c      	mov	r4, r1
 8000734:	461d      	mov	r5, r3
 8000736:	f04f 0200 	mov.w	r2, #0
 800073a:	f04f 0300 	mov.w	r3, #0
 800073e:	00eb      	lsls	r3, r5, #3
 8000740:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000744:	00e2      	lsls	r2, r4, #3
 8000746:	1dcb      	adds	r3, r1, #7
 8000748:	08db      	lsrs	r3, r3, #3
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	ebad 0d03 	sub.w	sp, sp, r3
 8000750:	466b      	mov	r3, sp
 8000752:	3300      	adds	r3, #0
 8000754:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t readScratch_data[35];
	uint8_t copyScratch_data[3];

	writeScratch_data[0] = TA1;
 8000756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000758:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800075c:	701a      	strb	r2, [r3, #0]
	writeScratch_data[1] = TA2;
 800075e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000760:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8000764:	705a      	strb	r2, [r3, #1]
	for (size_t i = 2; i < size+2; i++)
 8000766:	2302      	movs	r3, #2
 8000768:	657b      	str	r3, [r7, #84]	@ 0x54
 800076a:	e00c      	b.n	8000786 <write_data_toMem+0x9e>
		writeScratch_data[i] = data[i-2];
 800076c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800076e:	3b02      	subs	r3, #2
 8000770:	68ba      	ldr	r2, [r7, #8]
 8000772:	4413      	add	r3, r2
 8000774:	7819      	ldrb	r1, [r3, #0]
 8000776:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800077a:	4413      	add	r3, r2
 800077c:	460a      	mov	r2, r1
 800077e:	701a      	strb	r2, [r3, #0]
	for (size_t i = 2; i < size+2; i++)
 8000780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000782:	3301      	adds	r3, #1
 8000784:	657b      	str	r3, [r7, #84]	@ 0x54
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3302      	adds	r3, #2
 800078a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800078c:	429a      	cmp	r2, r3
 800078e:	d3ed      	bcc.n	800076c <write_data_toMem+0x84>

	// сначала делаем ReadRom, а потом другие команды
	ReadRom(huart, dataRom);
 8000790:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000794:	4619      	mov	r1, r3
 8000796:	68f8      	ldr	r0, [r7, #12]
 8000798:	f7ff ff94 	bl	80006c4 <ReadRom>
	WriteScratchpad(huart, writeScratch_data, size+2);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3302      	adds	r3, #2
 80007a0:	461a      	mov	r2, r3
 80007a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80007a4:	68f8      	ldr	r0, [r7, #12]
 80007a6:	f7ff ff25 	bl	80005f4 <WriteScratchpad>

	ReadRom(huart, dataRom);
 80007aa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80007ae:	4619      	mov	r1, r3
 80007b0:	68f8      	ldr	r0, [r7, #12]
 80007b2:	f7ff ff87 	bl	80006c4 <ReadRom>
	ReadScratchpad(huart, readScratch_data);
 80007b6:	f107 0318 	add.w	r3, r7, #24
 80007ba:	4619      	mov	r1, r3
 80007bc:	68f8      	ldr	r0, [r7, #12]
 80007be:	f7ff ff33 	bl	8000628 <ReadScratchpad>

	// запись целевого адреса в начало массивов
	for (int i = 0; i < 3; i++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80007c6:	e00d      	b.n	80007e4 <write_data_toMem+0xfc>
		copyScratch_data[i] = readScratch_data[i];
 80007c8:	f107 0218 	add.w	r2, r7, #24
 80007cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80007ce:	4413      	add	r3, r2
 80007d0:	7819      	ldrb	r1, [r3, #0]
 80007d2:	f107 0214 	add.w	r2, r7, #20
 80007d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80007d8:	4413      	add	r3, r2
 80007da:	460a      	mov	r2, r1
 80007dc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++)
 80007de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80007e0:	3301      	adds	r3, #1
 80007e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80007e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	ddee      	ble.n	80007c8 <write_data_toMem+0xe0>

	ReadRom(huart, dataRom);
 80007ea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80007ee:	4619      	mov	r1, r3
 80007f0:	68f8      	ldr	r0, [r7, #12]
 80007f2:	f7ff ff67 	bl	80006c4 <ReadRom>
	CopyScratchpad(huart, copyScratch_data);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	f7ff ff27 	bl	8000650 <CopyScratchpad>
 8000802:	46b5      	mov	sp, r6
}
 8000804:	bf00      	nop
 8000806:	375c      	adds	r7, #92	@ 0x5c
 8000808:	46bd      	mov	sp, r7
 800080a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800080e <get_rand_data>:
	return true;
}


static void get_rand_data(uint8_t *data)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i<32; i++)
 8000816:	2300      	movs	r3, #0
 8000818:	73fb      	strb	r3, [r7, #15]
 800081a:	e00f      	b.n	800083c <get_rand_data+0x2e>
	{
		data[i] = (rand() % 256);
 800081c:	f003 fb80 	bl	8003f20 <rand>
 8000820:	4603      	mov	r3, r0
 8000822:	425a      	negs	r2, r3
 8000824:	b2db      	uxtb	r3, r3
 8000826:	b2d2      	uxtb	r2, r2
 8000828:	bf58      	it	pl
 800082a:	4253      	negpl	r3, r2
 800082c:	7bfa      	ldrb	r2, [r7, #15]
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	440a      	add	r2, r1
 8000832:	b2db      	uxtb	r3, r3
 8000834:	7013      	strb	r3, [r2, #0]
	for (uint8_t i=0; i<32; i++)
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	3301      	adds	r3, #1
 800083a:	73fb      	strb	r3, [r7, #15]
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	2b1f      	cmp	r3, #31
 8000840:	d9ec      	bls.n	800081c <get_rand_data+0xe>
	}
}
 8000842:	bf00      	nop
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <compare_data>:

static bool compare_data(uint8_t *write_data, uint8_t *read_data)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 32; i++)
 8000856:	2300      	movs	r3, #0
 8000858:	73fb      	strb	r3, [r7, #15]
 800085a:	e00e      	b.n	800087a <compare_data+0x2e>
	{
		if (write_data[i] != read_data[i])
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	6839      	ldr	r1, [r7, #0]
 8000868:	440b      	add	r3, r1
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	429a      	cmp	r2, r3
 800086e:	d001      	beq.n	8000874 <compare_data+0x28>
			return memory_false;
 8000870:	2300      	movs	r3, #0
 8000872:	e006      	b.n	8000882 <compare_data+0x36>
	for (uint8_t i = 0; i < 32; i++)
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	3301      	adds	r3, #1
 8000878:	73fb      	strb	r3, [r7, #15]
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	2b1f      	cmp	r3, #31
 800087e:	d9ed      	bls.n	800085c <compare_data+0x10>
	}
	return memory_true;
 8000880:	2301      	movs	r3, #1
}
 8000882:	4618      	mov	r0, r3
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <read_mem_data>:

static void read_mem_data(UART_HandleTypeDef *huart, uint8_t *data, size_t size, uint16_t addr)
{
 800088e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000892:	b08b      	sub	sp, #44	@ 0x2c
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
 800089c:	807b      	strh	r3, [r7, #2]
 800089e:	466b      	mov	r3, sp
 80008a0:	461e      	mov	r6, r3
	uint8_t TA1 = (addr & 0x00FF);
 80008a2:	887b      	ldrh	r3, [r7, #2]
 80008a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t TA2 = ((addr & 0xFF00)>>8);
 80008a8:	887b      	ldrh	r3, [r7, #2]
 80008aa:	0a1b      	lsrs	r3, r3, #8
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	uint8_t buf[size+2];
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	1c99      	adds	r1, r3, #2
 80008b6:	460b      	mov	r3, r1
 80008b8:	3b01      	subs	r3, #1
 80008ba:	61fb      	str	r3, [r7, #28]
 80008bc:	2300      	movs	r3, #0
 80008be:	4688      	mov	r8, r1
 80008c0:	4699      	mov	r9, r3
 80008c2:	f04f 0200 	mov.w	r2, #0
 80008c6:	f04f 0300 	mov.w	r3, #0
 80008ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80008ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80008d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80008d6:	2300      	movs	r3, #0
 80008d8:	460c      	mov	r4, r1
 80008da:	461d      	mov	r5, r3
 80008dc:	f04f 0200 	mov.w	r2, #0
 80008e0:	f04f 0300 	mov.w	r3, #0
 80008e4:	00eb      	lsls	r3, r5, #3
 80008e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80008ea:	00e2      	lsls	r2, r4, #3
 80008ec:	1dcb      	adds	r3, r1, #7
 80008ee:	08db      	lsrs	r3, r3, #3
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	ebad 0d03 	sub.w	sp, sp, r3
 80008f6:	466b      	mov	r3, sp
 80008f8:	3300      	adds	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]

	buf[0] = TA1;
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000902:	701a      	strb	r2, [r3, #0]
	buf[1] = TA2;
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800090a:	705a      	strb	r2, [r3, #1]

	uint8_t dataRom[8];

	ReadRom(huart, dataRom);
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	68f8      	ldr	r0, [r7, #12]
 8000914:	f7ff fed6 	bl	80006c4 <ReadRom>
	ReadMemory(huart, buf, size);
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	69b9      	ldr	r1, [r7, #24]
 800091c:	68f8      	ldr	r0, [r7, #12]
 800091e:	f7ff feb7 	bl	8000690 <ReadMemory>

	for(size_t i = 0; i < size; i++)
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
 8000926:	e00a      	b.n	800093e <read_mem_data+0xb0>
		data[i] = buf[i];
 8000928:	68ba      	ldr	r2, [r7, #8]
 800092a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800092c:	4413      	add	r3, r2
 800092e:	69b9      	ldr	r1, [r7, #24]
 8000930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000932:	440a      	add	r2, r1
 8000934:	7812      	ldrb	r2, [r2, #0]
 8000936:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < size; i++)
 8000938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093a:	3301      	adds	r3, #1
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
 800093e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	429a      	cmp	r2, r3
 8000944:	d3f0      	bcc.n	8000928 <read_mem_data+0x9a>
 8000946:	46b5      	mov	sp, r6
}
 8000948:	bf00      	nop
 800094a:	372c      	adds	r7, #44	@ 0x2c
 800094c:	46bd      	mov	sp, r7
 800094e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000952 <check_memory>:

bool check_memory(UART_HandleTypeDef *huart)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b094      	sub	sp, #80	@ 0x50
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
	uint8_t data[32] = {0};
 800095a:	2300      	movs	r3, #0
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800095e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
 800096e:	615a      	str	r2, [r3, #20]
 8000970:	619a      	str	r2, [r3, #24]
	uint8_t readMem_data[32] = {0};
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	f107 0310 	add.w	r3, r7, #16
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
 8000986:	615a      	str	r2, [r3, #20]
 8000988:	619a      	str	r2, [r3, #24]

	for (uint32_t addr = 0; addr <= 0x01E0; addr+=32)
 800098a:	2300      	movs	r3, #0
 800098c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800098e:	e027      	b.n	80009e0 <check_memory+0x8e>
	{

		get_rand_data(data);
 8000990:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff3a 	bl	800080e <get_rand_data>
		write_data_toMem(huart, data, 32, addr);
 800099a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800099c:	b29b      	uxth	r3, r3
 800099e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80009a2:	2220      	movs	r2, #32
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff fe9f 	bl	80006e8 <write_data_toMem>
		read_mem_data(huart, readMem_data, 32, addr);
 80009aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	f107 010c 	add.w	r1, r7, #12
 80009b2:	2220      	movs	r2, #32
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff6a 	bl	800088e <read_mem_data>

		if (!compare_data(data, readMem_data))
 80009ba:	f107 020c 	add.w	r2, r7, #12
 80009be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff41 	bl	800084c <compare_data>
 80009ca:	4603      	mov	r3, r0
 80009cc:	f083 0301 	eor.w	r3, r3, #1
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <check_memory+0x88>
			return memory_false;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e007      	b.n	80009ea <check_memory+0x98>
	for (uint32_t addr = 0; addr <= 0x01E0; addr+=32)
 80009da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80009dc:	3320      	adds	r3, #32
 80009de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80009e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80009e2:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80009e6:	d9d3      	bls.n	8000990 <check_memory+0x3e>
	}

	return memory_true;
 80009e8:	2301      	movs	r3, #1
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3750      	adds	r7, #80	@ 0x50
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <lcd1602_Send_init_Data>:

/*============================Вспомогательные функции============================*/
/*-------------Функция для отправки данных при инициализации дисплея-------------*/
/// Функция предназначена для отправки байта данных по шине i2c. Содержит в себе Delay. Без него инициализация дисплея не проходит.
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_init_Data(uint8_t *init_Data) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af02      	add	r7, sp, #8
 80009fa:	6078      	str	r0, [r7, #4]
	if (backlight) {
 80009fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <lcd1602_Send_init_Data+0x80>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d007      	beq.n	8000a14 <lcd1602_Send_init_Data+0x20>
		*init_Data |= 0x08; //Включить подсветку
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	701a      	strb	r2, [r3, #0]
 8000a12:	e006      	b.n	8000a22 <lcd1602_Send_init_Data+0x2e>
	} else {
		*init_Data &= ~0x08; //Выключить подсветку
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	f023 0308 	bic.w	r3, r3, #8
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	701a      	strb	r2, [r3, #0]
	}
	*init_Data |= 0x04; // Устанавливаем стробирующий сигнал E в 1
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f043 0304 	orr.w	r3, r3, #4
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 8000a30:	230a      	movs	r3, #10
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	2301      	movs	r3, #1
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	214e      	movs	r1, #78	@ 0x4e
 8000a3a:	480f      	ldr	r0, [pc, #60]	@ (8000a78 <lcd1602_Send_init_Data+0x84>)
 8000a3c:	f001 fe14 	bl	8002668 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000a40:	2005      	movs	r0, #5
 8000a42:	f001 f9fb 	bl	8001e3c <HAL_Delay>
	*init_Data &= ~0x04; // Устанавливаем стробирующий сигнал E в 0
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	f023 0304 	bic.w	r3, r3, #4
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 8000a54:	230a      	movs	r3, #10
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	2301      	movs	r3, #1
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	214e      	movs	r1, #78	@ 0x4e
 8000a5e:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <lcd1602_Send_init_Data+0x84>)
 8000a60:	f001 fe02 	bl	8002668 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000a64:	2005      	movs	r0, #5
 8000a66:	f001 f9e9 	bl	8001e3c <HAL_Delay>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000026 	.word	0x20000026
 8000a78:	200000ac 	.word	0x200000ac

08000a7c <lcd1602_Send_data>:
/*----------------------Функция отправки байта данных----------------------------*/

/*----------------------Основная функция для отправки данных---------------------*/
/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af02      	add	r7, sp, #8
 8000a82:	6078      	str	r0, [r7, #4]

	if (backlight) {
 8000a84:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <lcd1602_Send_data+0x74>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d007      	beq.n	8000a9c <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	e006      	b.n	8000aaa <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	f023 0308 	bic.w	r3, r3, #8
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 8000ab8:	230a      	movs	r3, #10
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2301      	movs	r3, #1
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	214e      	movs	r1, #78	@ 0x4e
 8000ac2:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <lcd1602_Send_data+0x78>)
 8000ac4:	f001 fdd0 	bl	8002668 <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	f023 0304 	bic.w	r3, r3, #4
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 8000ad6:	230a      	movs	r3, #10
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	2301      	movs	r3, #1
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	214e      	movs	r1, #78	@ 0x4e
 8000ae0:	4804      	ldr	r0, [pc, #16]	@ (8000af4 <lcd1602_Send_data+0x78>)
 8000ae2:	f001 fdc1 	bl	8002668 <HAL_I2C_Master_Transmit>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000026 	.word	0x20000026
 8000af4:	200000ac 	.word	0x200000ac

08000af8 <lcd1602_Init>:
/*----------------------Основная функция для отправки данных---------------------*/
/*============================Вспомогательные функции============================*/

/*-------------------------Функция инициализации дисплея-------------------------*/
/// Функция инициализации дисплея
void lcd1602_Init(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
	/*========Power on========*/
	uint8_t tx_buffer = 0x30;
 8000afe:	2330      	movs	r3, #48	@ 0x30
 8000b00:	71fb      	strb	r3, [r7, #7]
	/*========Wait for more than 15 ms after Vcc rises to 4.5V========*/
	HAL_Delay(15);
 8000b02:	200f      	movs	r0, #15
 8000b04:	f001 f99a 	bl	8001e3c <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff72 	bl	80009f4 <lcd1602_Send_init_Data>
	/*========Wait for more 4.1 ms========*/
	HAL_Delay(5);
 8000b10:	2005      	movs	r0, #5
 8000b12:	f001 f993 	bl	8001e3c <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff6b 	bl	80009f4 <lcd1602_Send_init_Data>
	/*========Wait for more 100 microsec========*/
	HAL_Delay(1);
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f001 f98c 	bl	8001e3c <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff64 	bl	80009f4 <lcd1602_Send_init_Data>

	/*========Включаем 4х-битный интерфейс========*/
	tx_buffer = 0x20;
 8000b2c:	2320      	movs	r3, #32
 8000b2e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000b30:	1dfb      	adds	r3, r7, #7
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff5e 	bl	80009f4 <lcd1602_Send_init_Data>
	/*========Включаем 4х-битный интерфейс========*/

	/*======2 строки, шрифт 5х8======*/
	tx_buffer = 0x20;
 8000b38:	2320      	movs	r3, #32
 8000b3a:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff58 	bl	80009f4 <lcd1602_Send_init_Data>
	tx_buffer = 0xC0;
 8000b44:	23c0      	movs	r3, #192	@ 0xc0
 8000b46:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ff52 	bl	80009f4 <lcd1602_Send_init_Data>
	/*======2 строки, шрифт 5х8======*/

	/*========Выключить дисплей========*/
	tx_buffer = 0x00;
 8000b50:	2300      	movs	r3, #0
 8000b52:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ff4c 	bl	80009f4 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 8000b5c:	2380      	movs	r3, #128	@ 0x80
 8000b5e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000b60:	1dfb      	adds	r3, r7, #7
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff46 	bl	80009f4 <lcd1602_Send_init_Data>
	/*========Выключить дисплей========*/

	/*========Очистить дисплей========*/
	tx_buffer = 0x00;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000b6c:	1dfb      	adds	r3, r7, #7
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff40 	bl	80009f4 <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 8000b74:	2310      	movs	r3, #16
 8000b76:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000b78:	1dfb      	adds	r3, r7, #7
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ff3a 	bl	80009f4 <lcd1602_Send_init_Data>
	/*========Очистить дисплей========*/

	/*========Режим сдвига курсора========*/
	tx_buffer = 0x00;
 8000b80:	2300      	movs	r3, #0
 8000b82:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000b84:	1dfb      	adds	r3, r7, #7
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ff34 	bl	80009f4 <lcd1602_Send_init_Data>
	tx_buffer = 0x30;
 8000b8c:	2330      	movs	r3, #48	@ 0x30
 8000b8e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff2e 	bl	80009f4 <lcd1602_Send_init_Data>
	/*========Режим сдвига курсора========*/

	/*========Инициализация завершена. Включить дисплей========*/
	tx_buffer = 0x00;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff28 	bl	80009f4 <lcd1602_Send_init_Data>
	tx_buffer = 0xC0;
 8000ba4:	23c0      	movs	r3, #192	@ 0xc0
 8000ba6:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff22 	bl	80009f4 <lcd1602_Send_init_Data>
	/*========Инициализация завершена. Включить дисплей========*/
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <lcd1602_Print_symbol>:
/*-------------------------Функция инициализации дисплея-------------------------*/

/*-------------------------Функция вывода символа на дисплей---------------------*/
/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	f023 030f 	bic.w	r3, r3, #15
 8000bca:	b25b      	sxtb	r3, r3
 8000bcc:	f043 0309 	orr.w	r3, r3, #9
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8000bd6:	f107 030f 	add.w	r3, r7, #15
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff4e 	bl	8000a7c <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	011b      	lsls	r3, r3, #4
 8000be4:	b25b      	sxtb	r3, r3
 8000be6:	f043 0309 	orr.w	r3, r3, #9
 8000bea:	b25b      	sxtb	r3, r3
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8000bf0:	f107 030f 	add.w	r3, r7, #15
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff41 	bl	8000a7c <lcd1602_Send_data>
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <lcd1602_Print_text>:

/*-------------------------Функция вывода текста на дисплей----------------------*/
/// Функция вывода символа на дисплей
/// \param *message - массив, который отправляем на дисплей.
/// Максимальная длина сообщения - 40 символов.
void lcd1602_Print_text(char *message) {
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b084      	sub	sp, #16
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(message); i++) {
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	e009      	b.n	8000c24 <lcd1602_Print_text+0x22>
		lcd1602_Print_symbol(message[i]);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ffcd 	bl	8000bb8 <lcd1602_Print_symbol>
	for (int i = 0; i < strlen(message); i++) {
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3301      	adds	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff fadb 	bl	80001e0 <strlen>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d8ee      	bhi.n	8000c10 <lcd1602_Print_text+0xe>
	}
}
 8000c32:	bf00      	nop
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	460a      	mov	r2, r1
 8000c46:	71fb      	strb	r3, [r7, #7]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	71bb      	strb	r3, [r7, #6]
	uint8_t command, adr;
	if (y > 3)
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	d901      	bls.n	8000c56 <lcd1602_SetCursor+0x1a>
		y = 3;
 8000c52:	2303      	movs	r3, #3
 8000c54:	71bb      	strb	r3, [r7, #6]
	if (x > 39)
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b27      	cmp	r3, #39	@ 0x27
 8000c5a:	d901      	bls.n	8000c60 <lcd1602_SetCursor+0x24>
		x = 39;
 8000c5c:	2327      	movs	r3, #39	@ 0x27
 8000c5e:	71fb      	strb	r3, [r7, #7]
	if (y == 0) {
 8000c60:	79bb      	ldrb	r3, [r7, #6]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <lcd1602_SetCursor+0x2e>
		adr = x;
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 1) {
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d102      	bne.n	8000c76 <lcd1602_SetCursor+0x3a>
		adr = x + 0x40;
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	3340      	adds	r3, #64	@ 0x40
 8000c74:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 2) {
 8000c76:	79bb      	ldrb	r3, [r7, #6]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d102      	bne.n	8000c82 <lcd1602_SetCursor+0x46>
		adr = x + 0x14;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	3314      	adds	r3, #20
 8000c80:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 3) {
 8000c82:	79bb      	ldrb	r3, [r7, #6]
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	d102      	bne.n	8000c8e <lcd1602_SetCursor+0x52>
		adr = x + 0x54;
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	3354      	adds	r3, #84	@ 0x54
 8000c8c:	73fb      	strb	r3, [r7, #15]
	}
	command = ((adr & 0xf0) | 0x80);
 8000c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c9c:	b25b      	sxtb	r3, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8000ca2:	f107 030e 	add.w	r3, r7, #14
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fee8 	bl	8000a7c <lcd1602_Send_data>

	command = (adr << 4);
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	011b      	lsls	r3, r3, #4
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8000cb4:	f107 030e 	add.w	r3, r7, #14
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fedf 	bl	8000a7c <lcd1602_Send_data>

}
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <lcd1602_Clean_Text>:
	lcd1602_Send_init_Data(&tx_buffer);

}
/*-------------------------Функция очистки дисплея-------------------------------*/

void lcd1602_Clean_Text(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
/// Альтернативная функция очистки дисплея
/// Заполняет все поле памяти пробелами
/// Работает быстрее, чем lcd1602_Clean, но в отличии от нее не возвращает курсор в начальное положение
	lcd1602_SetCursor(0, 0);
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f7ff ffb4 	bl	8000c3c <lcd1602_SetCursor>
	lcd1602_Print_text("                                        ");
 8000cd4:	4805      	ldr	r0, [pc, #20]	@ (8000cec <lcd1602_Clean_Text+0x24>)
 8000cd6:	f7ff ff94 	bl	8000c02 <lcd1602_Print_text>
	lcd1602_SetCursor(0, 1);
 8000cda:	2101      	movs	r1, #1
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff ffad 	bl	8000c3c <lcd1602_SetCursor>
	lcd1602_Print_text("                                        ");
 8000ce2:	4802      	ldr	r0, [pc, #8]	@ (8000cec <lcd1602_Clean_Text+0x24>)
 8000ce4:	f7ff ff8d 	bl	8000c02 <lcd1602_Print_text>
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	08004ef4 	.word	0x08004ef4

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08e      	sub	sp, #56	@ 0x38
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf6:	f001 f82f 	bl	8001d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfa:	f000 f89f 	bl	8000e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfe:	f000 f961 	bl	8000fc4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d02:	f000 f907 	bl	8000f14 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8000d06:	f000 f933 	bl	8000f70 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000d0a:	2064      	movs	r0, #100	@ 0x64
 8000d0c:	f001 f896 	bl	8001e3c <HAL_Delay>

  lcd1602_Init();
 8000d10:	f7ff fef2 	bl	8000af8 <lcd1602_Init>

  ONEWIRE_Status status = OneWire_Reset(&huart6); // проверка наличия подключенной ds24b33
 8000d14:	4842      	ldr	r0, [pc, #264]	@ (8000e20 <main+0x130>)
 8000d16:	f000 fdaf 	bl	8001878 <OneWire_Reset>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  // Добавление пунктов главного меню
  MenuManager main_menu_selector;
  main_menu_selector.size = SIZE_MAIN_MENU;
 8000d20:	2302      	movs	r3, #2
 8000d22:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

  uint8_t main_menu_current_point = 0;	// номер выбранного пункта главного меню
 8000d26:	2300      	movs	r3, #0
 8000d28:	71fb      	strb	r3, [r7, #7]


  strcpy(main_menu_selector.menu[0].name,"Test Mem");
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	4a3d      	ldr	r2, [pc, #244]	@ (8000e24 <main+0x134>)
 8000d30:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d32:	c303      	stmia	r3!, {r0, r1}
 8000d34:	701a      	strb	r2, [r3, #0]
  main_menu_selector.menu[0].size = 9;
 8000d36:	2309      	movs	r3, #9
 8000d38:	757b      	strb	r3, [r7, #21]
  main_menu_selector.menu[0].ActionFun = CheckMemHandler;
 8000d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e28 <main+0x138>)
 8000d3c:	61bb      	str	r3, [r7, #24]

  strcpy(main_menu_selector.menu[1].name, "Write Mem");
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	3314      	adds	r3, #20
 8000d44:	4a39      	ldr	r2, [pc, #228]	@ (8000e2c <main+0x13c>)
 8000d46:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d48:	c303      	stmia	r3!, {r0, r1}
 8000d4a:	801a      	strh	r2, [r3, #0]
  main_menu_selector.menu[1].size = 10;
 8000d4c:	230a      	movs	r3, #10
 8000d4e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  //TODO

  PrintMainMenu(&main_menu_selector, main_menu_current_point);
 8000d52:	79fa      	ldrb	r2, [r7, #7]
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fa46 	bl	80011ec <PrintMainMenu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (status == ONEWIRE_OK)
 8000d60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d14c      	bne.n	8000e02 <main+0x112>
	  {
		  if (button_status == true)
 8000d68:	4b31      	ldr	r3, [pc, #196]	@ (8000e30 <main+0x140>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d041      	beq.n	8000df4 <main+0x104>
		  {
			  layer %= 2;  // проверка значения layer, чтобы не выйти за пределы
 8000d70:	4b30      	ldr	r3, [pc, #192]	@ (8000e34 <main+0x144>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e34 <main+0x144>)
 8000d7c:	701a      	strb	r2, [r3, #0]

			  switch(but)
 8000d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e38 <main+0x148>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d836      	bhi.n	8000df4 <main+0x104>
 8000d86:	a201      	add	r2, pc, #4	@ (adr r2, 8000d8c <main+0x9c>)
 8000d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8c:	08000d9d 	.word	0x08000d9d
 8000d90:	08000db3 	.word	0x08000db3
 8000d94:	08000dc9 	.word	0x08000dc9
 8000d98:	08000ddf 	.word	0x08000ddf
			  {
			  case Ok:
				  FirsButtonHandler(&huart6, &main_menu_selector, &layer, &main_menu_current_point);
 8000d9c:	1dfb      	adds	r3, r7, #7
 8000d9e:	f107 0108 	add.w	r1, r7, #8
 8000da2:	4a24      	ldr	r2, [pc, #144]	@ (8000e34 <main+0x144>)
 8000da4:	481e      	ldr	r0, [pc, #120]	@ (8000e20 <main+0x130>)
 8000da6:	f000 fa9d 	bl	80012e4 <FirsButtonHandler>

				  button_status = false;
 8000daa:	4b21      	ldr	r3, [pc, #132]	@ (8000e30 <main+0x140>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
				  break;
 8000db0:	e020      	b.n	8000df4 <main+0x104>
			  case Back:
				  SecondButtonHandler(&huart6, &main_menu_selector, &layer, &main_menu_current_point);
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	f107 0108 	add.w	r1, r7, #8
 8000db8:	4a1e      	ldr	r2, [pc, #120]	@ (8000e34 <main+0x144>)
 8000dba:	4819      	ldr	r0, [pc, #100]	@ (8000e20 <main+0x130>)
 8000dbc:	f000 fabf 	bl	800133e <SecondButtonHandler>

				  button_status = false;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e30 <main+0x140>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
				  break;
 8000dc6:	e015      	b.n	8000df4 <main+0x104>
			  case Left:
				  ThirdButtonHandler(&huart6, &main_menu_selector, &layer, &main_menu_current_point);
 8000dc8:	1dfb      	adds	r3, r7, #7
 8000dca:	f107 0108 	add.w	r1, r7, #8
 8000dce:	4a19      	ldr	r2, [pc, #100]	@ (8000e34 <main+0x144>)
 8000dd0:	4813      	ldr	r0, [pc, #76]	@ (8000e20 <main+0x130>)
 8000dd2:	f000 fac1 	bl	8001358 <ThirdButtonHandler>

				  button_status = false;
 8000dd6:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <main+0x140>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
				  break;
 8000ddc:	e00a      	b.n	8000df4 <main+0x104>
			  case Right:
				  FourthButtonHandler(&huart6, &main_menu_selector, &layer, &main_menu_current_point);
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	f107 0108 	add.w	r1, r7, #8
 8000de4:	4a13      	ldr	r2, [pc, #76]	@ (8000e34 <main+0x144>)
 8000de6:	480e      	ldr	r0, [pc, #56]	@ (8000e20 <main+0x130>)
 8000de8:	f000 fade 	bl	80013a8 <FourthButtonHandler>

				  button_status = false;
 8000dec:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <main+0x140>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
				  break;
 8000df2:	bf00      	nop
			  }
		  }

		  status = OneWire_Reset(&huart6); // проверяем наличия модуля на линии памяти
 8000df4:	480a      	ldr	r0, [pc, #40]	@ (8000e20 <main+0x130>)
 8000df6:	f000 fd3f 	bl	8001878 <OneWire_Reset>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000e00:	e7ae      	b.n	8000d60 <main+0x70>
	  }
	  else
	  {
		  layer = 0;
 8000e02:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <main+0x144>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
		  main_menu_current_point = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	71fb      	strb	r3, [r7, #7]
		  ExpectTargetDevice(&main_menu_selector, main_menu_current_point, &status);
 8000e0c:	79f9      	ldrb	r1, [r7, #7]
 8000e0e:	f107 0237 	add.w	r2, r7, #55	@ 0x37
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f934 	bl	8001084 <ExpectTargetDevice>
	  if (status == ONEWIRE_OK)
 8000e1c:	e7a0      	b.n	8000d60 <main+0x70>
 8000e1e:	bf00      	nop
 8000e20:	20000100 	.word	0x20000100
 8000e24:	08004f20 	.word	0x08004f20
 8000e28:	0800128d 	.word	0x0800128d
 8000e2c:	08004f2c 	.word	0x08004f2c
 8000e30:	20000149 	.word	0x20000149
 8000e34:	20000148 	.word	0x20000148
 8000e38:	2000014a 	.word	0x2000014a

08000e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b094      	sub	sp, #80	@ 0x50
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 0320 	add.w	r3, r7, #32
 8000e46:	2230      	movs	r2, #48	@ 0x30
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 f9ab 	bl	80041a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	4b29      	ldr	r3, [pc, #164]	@ (8000f0c <SystemClock_Config+0xd0>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e68:	4a28      	ldr	r2, [pc, #160]	@ (8000f0c <SystemClock_Config+0xd0>)
 8000e6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e70:	4b26      	ldr	r3, [pc, #152]	@ (8000f0c <SystemClock_Config+0xd0>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	4b23      	ldr	r3, [pc, #140]	@ (8000f10 <SystemClock_Config+0xd4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e88:	4a21      	ldr	r2, [pc, #132]	@ (8000f10 <SystemClock_Config+0xd4>)
 8000e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	4b1f      	ldr	r3, [pc, #124]	@ (8000f10 <SystemClock_Config+0xd4>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eaa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000eb0:	2319      	movs	r3, #25
 8000eb2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000eb4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000eb8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec2:	f107 0320 	add.w	r3, r7, #32
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 ff28 	bl	8002d1c <HAL_RCC_OscConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ed2:	f000 f957 	bl	8001184 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed6:	230f      	movs	r3, #15
 8000ed8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eda:	2302      	movs	r3, #2
 8000edc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ee2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f002 f98a 	bl	800320c <HAL_RCC_ClockConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000efe:	f000 f941 	bl	8001184 <Error_Handler>
  }
}
 8000f02:	bf00      	nop
 8000f04:	3750      	adds	r7, #80	@ 0x50
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40007000 	.word	0x40007000

08000f14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f18:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f1a:	4a13      	ldr	r2, [pc, #76]	@ (8000f68 <MX_I2C1_Init+0x54>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f20:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <MX_I2C1_Init+0x58>)
 8000f22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f52:	f001 fa45 	bl	80023e0 <HAL_I2C_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f5c:	f000 f912 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200000ac 	.word	0x200000ac
 8000f68:	40005400 	.word	0x40005400
 8000f6c:	000186a0 	.word	0x000186a0

08000f70 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <MX_USART6_UART_Init+0x4c>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	@ (8000fc0 <MX_USART6_UART_Init+0x50>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <MX_USART6_UART_Init+0x4c>)
 8000f7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f80:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <MX_USART6_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <MX_USART6_UART_Init+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <MX_USART6_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f94:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <MX_USART6_UART_Init+0x4c>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <MX_USART6_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <MX_USART6_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <MX_USART6_UART_Init+0x4c>)
 8000fa8:	f002 fb10 	bl	80035cc <HAL_HalfDuplex_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000fb2:	f000 f8e7 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000100 	.word	0x20000100
 8000fc0:	40011400 	.word	0x40011400

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	@ 0x28
 8000fc8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b27      	ldr	r3, [pc, #156]	@ (800107c <MX_GPIO_Init+0xb8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a26      	ldr	r2, [pc, #152]	@ (800107c <MX_GPIO_Init+0xb8>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b24      	ldr	r3, [pc, #144]	@ (800107c <MX_GPIO_Init+0xb8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b20      	ldr	r3, [pc, #128]	@ (800107c <MX_GPIO_Init+0xb8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800107c <MX_GPIO_Init+0xb8>)
 8001000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <MX_GPIO_Init+0xb8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <MX_GPIO_Init+0xb8>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4a18      	ldr	r2, [pc, #96]	@ (800107c <MX_GPIO_Init+0xb8>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
 8001022:	4b16      	ldr	r3, [pc, #88]	@ (800107c <MX_GPIO_Init+0xb8>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b12      	ldr	r3, [pc, #72]	@ (800107c <MX_GPIO_Init+0xb8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a11      	ldr	r2, [pc, #68]	@ (800107c <MX_GPIO_Init+0xb8>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <MX_GPIO_Init+0xb8>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_15;
 800104a:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001050:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001056:	2301      	movs	r3, #1
 8001058:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4807      	ldr	r0, [pc, #28]	@ (8001080 <MX_GPIO_Init+0xbc>)
 8001062:	f001 f821 	bl	80020a8 <HAL_GPIO_Init>

  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001066:	2017      	movs	r0, #23
 8001068:	f001 f803 	bl	8002072 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800106c:	2028      	movs	r0, #40	@ 0x28
 800106e:	f001 f800 	bl	8002072 <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	@ 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40020000 	.word	0x40020000

08001084 <ExpectTargetDevice>:

/* USER CODE BEGIN 4 */

// Функция ожидания вставки модуля памяти (висим в ней пока линия пустая)
void ExpectTargetDevice(MenuManager* menu, uint8_t point, ONEWIRE_Status* status)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	460b      	mov	r3, r1
 800108e:	607a      	str	r2, [r7, #4]
 8001090:	72fb      	strb	r3, [r7, #11]
	lcd1602_Clean_Text();
 8001092:	f7ff fe19 	bl	8000cc8 <lcd1602_Clean_Text>
	lcd1602_SetCursor(0, 0);
 8001096:	2100      	movs	r1, #0
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff fdcf 	bl	8000c3c <lcd1602_SetCursor>
	lcd1602_Print_text("ERROR");
 800109e:	480f      	ldr	r0, [pc, #60]	@ (80010dc <ExpectTargetDevice+0x58>)
 80010a0:	f7ff fdaf 	bl	8000c02 <lcd1602_Print_text>
	lcd1602_SetCursor(0, 1);
 80010a4:	2101      	movs	r1, #1
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fdc8 	bl	8000c3c <lcd1602_SetCursor>
	lcd1602_Print_text("INSERT DS24B33");
 80010ac:	480c      	ldr	r0, [pc, #48]	@ (80010e0 <ExpectTargetDevice+0x5c>)
 80010ae:	f7ff fda8 	bl	8000c02 <lcd1602_Print_text>

	while(*status)
 80010b2:	e006      	b.n	80010c2 <ExpectTargetDevice+0x3e>
	{
		*status = OneWire_Reset(&huart6);
 80010b4:	480b      	ldr	r0, [pc, #44]	@ (80010e4 <ExpectTargetDevice+0x60>)
 80010b6:	f000 fbdf 	bl	8001878 <OneWire_Reset>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	701a      	strb	r2, [r3, #0]
	while(*status)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f4      	bne.n	80010b4 <ExpectTargetDevice+0x30>
	}

	PrintMainMenu(menu, point);
 80010ca:	7afb      	ldrb	r3, [r7, #11]
 80010cc:	4619      	mov	r1, r3
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f000 f88c 	bl	80011ec <PrintMainMenu>
}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	08004f38 	.word	0x08004f38
 80010e0:	08004f40 	.word	0x08004f40
 80010e4:	20000100 	.word	0x20000100

080010e8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80010ec:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80010f0:	f001 f95e 	bl	80023b0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80010f4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010f8:	f001 f95a 	bl	80023b0 <HAL_GPIO_EXTI_IRQHandler>
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001104:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001108:	f001 f952 	bl	80023b0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800110c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001110:	f001 f94e 	bl	80023b0 <HAL_GPIO_EXTI_IRQHandler>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
	extern bool button_status;
	extern Action but;

	if(GPIO_Pin == GPIO_PIN_8)
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001128:	d106      	bne.n	8001138 <HAL_GPIO_EXTI_Callback+0x20>
	{
		button_status = true;
 800112a:	4b14      	ldr	r3, [pc, #80]	@ (800117c <HAL_GPIO_EXTI_Callback+0x64>)
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
		but = Ok;
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x68>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
	else
	{
		button_status = true;
		but = Right;
	}
}
 8001136:	e01b      	b.n	8001170 <HAL_GPIO_EXTI_Callback+0x58>
	else if(GPIO_Pin == GPIO_PIN_9)
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800113e:	d106      	bne.n	800114e <HAL_GPIO_EXTI_Callback+0x36>
		button_status = true;
 8001140:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <HAL_GPIO_EXTI_Callback+0x64>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
		but = Back;
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x68>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
}
 800114c:	e010      	b.n	8001170 <HAL_GPIO_EXTI_Callback+0x58>
	else if (GPIO_Pin == GPIO_PIN_10)
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001154:	d106      	bne.n	8001164 <HAL_GPIO_EXTI_Callback+0x4c>
		button_status = true;
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <HAL_GPIO_EXTI_Callback+0x64>)
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
		but = Left;
 800115c:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x68>)
 800115e:	2202      	movs	r2, #2
 8001160:	701a      	strb	r2, [r3, #0]
}
 8001162:	e005      	b.n	8001170 <HAL_GPIO_EXTI_Callback+0x58>
		button_status = true;
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <HAL_GPIO_EXTI_Callback+0x64>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
		but = Right;
 800116a:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x68>)
 800116c:	2203      	movs	r2, #3
 800116e:	701a      	strb	r2, [r3, #0]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	20000149 	.word	0x20000149
 8001180:	2000014a 	.word	0x2000014a

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
}
 800118a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <Error_Handler+0x8>

08001190 <GetChoisePoint>:
uint8_t nested_menu_current_point = 0;
MenuManager choice_firm;

// добавление символов, чтобы пользователь понимал, какой пункт главного меню он выбрал
void GetChoisePoint(char* mes, uint8_t size_mes, char* choise)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	460b      	mov	r3, r1
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	72fb      	strb	r3, [r7, #11]
	for (uint8_t i = 0; i < size_mes; i++)
 800119e:	2300      	movs	r3, #0
 80011a0:	75fb      	strb	r3, [r7, #23]
 80011a2:	e00b      	b.n	80011bc <GetChoisePoint+0x2c>
	{
		choise[i+1] = mes[i];
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	441a      	add	r2, r3
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
 80011ac:	3301      	adds	r3, #1
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	440b      	add	r3, r1
 80011b2:	7812      	ldrb	r2, [r2, #0]
 80011b4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < size_mes; i++)
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	3301      	adds	r3, #1
 80011ba:	75fb      	strb	r3, [r7, #23]
 80011bc:	7dfa      	ldrb	r2, [r7, #23]
 80011be:	7afb      	ldrb	r3, [r7, #11]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d3ef      	bcc.n	80011a4 <GetChoisePoint+0x14>
	}

	choise[0] = '<';
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	223c      	movs	r2, #60	@ 0x3c
 80011c8:	701a      	strb	r2, [r3, #0]
	choise[size_mes] = '>';
 80011ca:	7afb      	ldrb	r3, [r7, #11]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	4413      	add	r3, r2
 80011d0:	223e      	movs	r2, #62	@ 0x3e
 80011d2:	701a      	strb	r2, [r3, #0]
	choise[size_mes+1] = '\0';
 80011d4:	7afb      	ldrb	r3, [r7, #11]
 80011d6:	3301      	adds	r3, #1
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	4413      	add	r3, r2
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
}
 80011e0:	bf00      	nop
 80011e2:	371c      	adds	r7, #28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <PrintMainMenu>:

// Вывод пунктов главного меню
void PrintMainMenu(MenuManager* m, uint8_t point)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	@ 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
	uint8_t menu_size = sizeof(m->menu) / sizeof(m->menu[0]);
 80011f8:	2302      	movs	r3, #2
 80011fa:	77fb      	strb	r3, [r7, #31]
	char* first_msg;
	char* second_msg;

	char user_choice[16];

	GetChoisePoint(m->menu[point].name, m->menu[point].size, user_choice);
 80011fc:	78fa      	ldrb	r2, [r7, #3]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	18d0      	adds	r0, r2, r3
 800120a:	78fa      	ldrb	r2, [r7, #3]
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	330d      	adds	r3, #13
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	f107 020c 	add.w	r2, r7, #12
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff ffb5 	bl	8001190 <GetChoisePoint>

	if (point == menu_size-1)
 8001226:	78fa      	ldrb	r2, [r7, #3]
 8001228:	7ffb      	ldrb	r3, [r7, #31]
 800122a:	3b01      	subs	r3, #1
 800122c:	429a      	cmp	r2, r3
 800122e:	d10c      	bne.n	800124a <PrintMainMenu+0x5e>
	{
		first_msg = m->menu[point-1].name;
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	1e5a      	subs	r2, r3, #1
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
		second_msg = user_choice;
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	623b      	str	r3, [r7, #32]
 8001248:	e00b      	b.n	8001262 <PrintMainMenu+0x76>
	}
	else
	{
		first_msg = user_choice;
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
		second_msg = m->menu[point+1].name;
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	4413      	add	r3, r2
 8001260:	623b      	str	r3, [r7, #32]
	}

	lcd1602_Clean_Text();
 8001262:	f7ff fd31 	bl	8000cc8 <lcd1602_Clean_Text>

	lcd1602_SetCursor(0, 0);
 8001266:	2100      	movs	r1, #0
 8001268:	2000      	movs	r0, #0
 800126a:	f7ff fce7 	bl	8000c3c <lcd1602_SetCursor>
	lcd1602_Print_text(first_msg);
 800126e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001270:	f7ff fcc7 	bl	8000c02 <lcd1602_Print_text>

	lcd1602_SetCursor(0, 1);
 8001274:	2101      	movs	r1, #1
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff fce0 	bl	8000c3c <lcd1602_SetCursor>
	lcd1602_Print_text(second_msg);
 800127c:	6a38      	ldr	r0, [r7, #32]
 800127e:	f7ff fcc0 	bl	8000c02 <lcd1602_Print_text>
}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	@ 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <CheckMemHandler>:

void CheckMemHandler(UART_HandleTypeDef *huart)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	lcd1602_Clean_Text();
 8001294:	f7ff fd18 	bl	8000cc8 <lcd1602_Clean_Text>
	lcd1602_SetCursor(0, 0);
 8001298:	2100      	movs	r1, #0
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff fcce 	bl	8000c3c <lcd1602_SetCursor>
	lcd1602_Print_text("CHECK MEM");
 80012a0:	480d      	ldr	r0, [pc, #52]	@ (80012d8 <CheckMemHandler+0x4c>)
 80012a2:	f7ff fcae 	bl	8000c02 <lcd1602_Print_text>
	lcd1602_SetCursor(0, 1);
 80012a6:	2101      	movs	r1, #1
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff fcc7 	bl	8000c3c <lcd1602_SetCursor>

	if (check_memory(huart))
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff fb4f 	bl	8000952 <check_memory>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <CheckMemHandler+0x36>
	{
		lcd1602_Print_text("SUCCESS");
 80012ba:	4808      	ldr	r0, [pc, #32]	@ (80012dc <CheckMemHandler+0x50>)
 80012bc:	f7ff fca1 	bl	8000c02 <lcd1602_Print_text>
 80012c0:	e002      	b.n	80012c8 <CheckMemHandler+0x3c>
	}
	else
	{
		lcd1602_Print_text("ERORR");
 80012c2:	4807      	ldr	r0, [pc, #28]	@ (80012e0 <CheckMemHandler+0x54>)
 80012c4:	f7ff fc9d 	bl	8000c02 <lcd1602_Print_text>
	}
	HAL_Delay(500);
 80012c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012cc:	f000 fdb6 	bl	8001e3c <HAL_Delay>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	08004f50 	.word	0x08004f50
 80012dc:	08004f5c 	.word	0x08004f5c
 80012e0:	08004f64 	.word	0x08004f64

080012e4 <FirsButtonHandler>:

//void Print

void FirsButtonHandler(UART_HandleTypeDef *huart, MenuManager* main_menu, uint8_t* layer, uint8_t* main_menu_current_point)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	603b      	str	r3, [r7, #0]

	if (*layer == 0)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d11d      	bne.n	8001336 <FirsButtonHandler+0x52>
	{
		if (*main_menu_current_point == 0)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d113      	bne.n	800132a <FirsButtonHandler+0x46>
		{
			main_menu->menu[*main_menu_current_point].ActionFun(huart);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	4619      	mov	r1, r3
 8001308:	68ba      	ldr	r2, [r7, #8]
 800130a:	460b      	mov	r3, r1
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	440b      	add	r3, r1
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	3310      	adds	r3, #16
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	4798      	blx	r3
			PrintMainMenu(main_menu, *main_menu_current_point);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	68b8      	ldr	r0, [r7, #8]
 8001324:	f7ff ff62 	bl	80011ec <PrintMainMenu>
	}
	else
	{
		//main_menu->menu[*main_menu_current_point].ActionFun(huart);
	}
}
 8001328:	e005      	b.n	8001336 <FirsButtonHandler+0x52>
			(*layer)++;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	b2da      	uxtb	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	701a      	strb	r2, [r3, #0]
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <SecondButtonHandler>:

void SecondButtonHandler(UART_HandleTypeDef *huart, MenuManager* main_menu, uint8_t* layer, uint8_t* main_menu_current_point)
{
 800133e:	b480      	push	{r7}
 8001340:	b085      	sub	sp, #20
 8001342:	af00      	add	r7, sp, #0
 8001344:	60f8      	str	r0, [r7, #12]
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
 800134a:	603b      	str	r3, [r7, #0]
	if (*layer == 1)
	{

	}
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <ThirdButtonHandler>:

void ThirdButtonHandler(UART_HandleTypeDef *huart, MenuManager* main_menu, uint8_t* layer, uint8_t* main_menu_current_point)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	603b      	str	r3, [r7, #0]
	if (*layer == 0)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d118      	bne.n	80013a0 <ThirdButtonHandler+0x48>
	{
		(*main_menu_current_point)--;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	3b01      	subs	r3, #1
 8001374:	b2da      	uxtb	r2, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	701a      	strb	r2, [r3, #0]
		*main_menu_current_point = abs(*main_menu_current_point) % main_menu->size; // исключаем выход за значение размера меню
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8001384:	fb93 f1f2 	sdiv	r1, r3, r2
 8001388:	fb01 f202 	mul.w	r2, r1, r2
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	b2da      	uxtb	r2, r3
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	701a      	strb	r2, [r3, #0]

		PrintMainMenu(main_menu, *main_menu_current_point);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	68b8      	ldr	r0, [r7, #8]
 800139c:	f7ff ff26 	bl	80011ec <PrintMainMenu>
	}
}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <FourthButtonHandler>:

void FourthButtonHandler(UART_HandleTypeDef *huart, MenuManager* main_menu, uint8_t* layer, uint8_t* main_menu_current_point)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	603b      	str	r3, [r7, #0]
	if (*layer == 0)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d118      	bne.n	80013f0 <FourthButtonHandler+0x48>
	{
		(*main_menu_current_point)++;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	3301      	adds	r3, #1
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	701a      	strb	r2, [r3, #0]
		*main_menu_current_point %= main_menu->size; // исключаем выход за значение размера меню
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 80013d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80013d8:	fb01 f202 	mul.w	r2, r1, r2
 80013dc:	1a9b      	subs	r3, r3, r2
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	701a      	strb	r2, [r3, #0]

		PrintMainMenu(main_menu, *main_menu_current_point);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	68b8      	ldr	r0, [r7, #8]
 80013ec:	f7ff fefe 	bl	80011ec <PrintMainMenu>
	}
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <SetBaudrate>:
 */

#include "onewire.h"

static void SetBaudrate(UART_HandleTypeDef *huart, uint32_t baudrate)
{
 80013f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013fc:	b0c0      	sub	sp, #256	@ 0x100
 80013fe:	af00      	add	r7, sp, #0
 8001400:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 8001404:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
	uint32_t pclk = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	huart->Init.BaudRate = baudrate;
 800140e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001412:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001416:	6053      	str	r3, [r2, #4]
	        (huart->Instance == UART9)  || (huart->Instance == UART10))
	    {
	      pclk = HAL_RCC_GetPCLK2Freq();
	    }
	#elif defined(USART6)
	    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b8f      	ldr	r3, [pc, #572]	@ (800165c <SetBaudrate+0x264>)
 8001420:	429a      	cmp	r2, r3
 8001422:	d005      	beq.n	8001430 <SetBaudrate+0x38>
 8001424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b8d      	ldr	r3, [pc, #564]	@ (8001660 <SetBaudrate+0x268>)
 800142c:	429a      	cmp	r2, r3
 800142e:	d104      	bne.n	800143a <SetBaudrate+0x42>
	    {
	      pclk = HAL_RCC_GetPCLK2Freq();
 8001430:	f002 f8b8 	bl	80035a4 <HAL_RCC_GetPCLK2Freq>
 8001434:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001438:	e003      	b.n	8001442 <SetBaudrate+0x4a>
	      pclk = HAL_RCC_GetPCLK2Freq();
	    }
	#endif /* USART6 */
	    else
	    {
	      pclk = HAL_RCC_GetPCLK1Freq();
 800143a:	f002 f89f 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 800143e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
	    }
	  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800144c:	f040 810c 	bne.w	8001668 <SetBaudrate+0x270>
	  {
	    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001454:	2200      	movs	r2, #0
 8001456:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800145a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800145e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001462:	4622      	mov	r2, r4
 8001464:	462b      	mov	r3, r5
 8001466:	1891      	adds	r1, r2, r2
 8001468:	65b9      	str	r1, [r7, #88]	@ 0x58
 800146a:	415b      	adcs	r3, r3
 800146c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800146e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001472:	4621      	mov	r1, r4
 8001474:	eb12 0801 	adds.w	r8, r2, r1
 8001478:	4629      	mov	r1, r5
 800147a:	eb43 0901 	adc.w	r9, r3, r1
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800148a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800148e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001492:	4690      	mov	r8, r2
 8001494:	4699      	mov	r9, r3
 8001496:	4623      	mov	r3, r4
 8001498:	eb18 0303 	adds.w	r3, r8, r3
 800149c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80014a0:	462b      	mov	r3, r5
 80014a2:	eb49 0303 	adc.w	r3, r9, r3
 80014a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80014aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80014b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80014ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80014be:	460b      	mov	r3, r1
 80014c0:	18db      	adds	r3, r3, r3
 80014c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80014c4:	4613      	mov	r3, r2
 80014c6:	eb42 0303 	adc.w	r3, r2, r3
 80014ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80014cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80014d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80014d4:	f7fe fedc 	bl	8000290 <__aeabi_uldivmod>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4b61      	ldr	r3, [pc, #388]	@ (8001664 <SetBaudrate+0x26c>)
 80014de:	fba3 2302 	umull	r2, r3, r3, r2
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	011c      	lsls	r4, r3, #4
 80014e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80014ea:	2200      	movs	r2, #0
 80014ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80014f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80014f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80014f8:	4642      	mov	r2, r8
 80014fa:	464b      	mov	r3, r9
 80014fc:	1891      	adds	r1, r2, r2
 80014fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001500:	415b      	adcs	r3, r3
 8001502:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001504:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001508:	4641      	mov	r1, r8
 800150a:	eb12 0a01 	adds.w	sl, r2, r1
 800150e:	4649      	mov	r1, r9
 8001510:	eb43 0b01 	adc.w	fp, r3, r1
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001520:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001524:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001528:	4692      	mov	sl, r2
 800152a:	469b      	mov	fp, r3
 800152c:	4643      	mov	r3, r8
 800152e:	eb1a 0303 	adds.w	r3, sl, r3
 8001532:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001536:	464b      	mov	r3, r9
 8001538:	eb4b 0303 	adc.w	r3, fp, r3
 800153c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800154c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001550:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001554:	460b      	mov	r3, r1
 8001556:	18db      	adds	r3, r3, r3
 8001558:	643b      	str	r3, [r7, #64]	@ 0x40
 800155a:	4613      	mov	r3, r2
 800155c:	eb42 0303 	adc.w	r3, r2, r3
 8001560:	647b      	str	r3, [r7, #68]	@ 0x44
 8001562:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001566:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800156a:	f7fe fe91 	bl	8000290 <__aeabi_uldivmod>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4611      	mov	r1, r2
 8001574:	4b3b      	ldr	r3, [pc, #236]	@ (8001664 <SetBaudrate+0x26c>)
 8001576:	fba3 2301 	umull	r2, r3, r3, r1
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	2264      	movs	r2, #100	@ 0x64
 800157e:	fb02 f303 	mul.w	r3, r2, r3
 8001582:	1acb      	subs	r3, r1, r3
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800158a:	4b36      	ldr	r3, [pc, #216]	@ (8001664 <SetBaudrate+0x26c>)
 800158c:	fba3 2302 	umull	r2, r3, r3, r2
 8001590:	095b      	lsrs	r3, r3, #5
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001598:	441c      	add	r4, r3
 800159a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800159e:	2200      	movs	r2, #0
 80015a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80015a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80015a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80015ac:	4642      	mov	r2, r8
 80015ae:	464b      	mov	r3, r9
 80015b0:	1891      	adds	r1, r2, r2
 80015b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80015b4:	415b      	adcs	r3, r3
 80015b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80015bc:	4641      	mov	r1, r8
 80015be:	1851      	adds	r1, r2, r1
 80015c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80015c2:	4649      	mov	r1, r9
 80015c4:	414b      	adcs	r3, r1
 80015c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80015d4:	4659      	mov	r1, fp
 80015d6:	00cb      	lsls	r3, r1, #3
 80015d8:	4651      	mov	r1, sl
 80015da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015de:	4651      	mov	r1, sl
 80015e0:	00ca      	lsls	r2, r1, #3
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	4603      	mov	r3, r0
 80015e8:	4642      	mov	r2, r8
 80015ea:	189b      	adds	r3, r3, r2
 80015ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80015f0:	464b      	mov	r3, r9
 80015f2:	460a      	mov	r2, r1
 80015f4:	eb42 0303 	adc.w	r3, r2, r3
 80015f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80015fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001608:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800160c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001610:	460b      	mov	r3, r1
 8001612:	18db      	adds	r3, r3, r3
 8001614:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001616:	4613      	mov	r3, r2
 8001618:	eb42 0303 	adc.w	r3, r2, r3
 800161c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800161e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001622:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001626:	f7fe fe33 	bl	8000290 <__aeabi_uldivmod>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <SetBaudrate+0x26c>)
 8001630:	fba3 1302 	umull	r1, r3, r3, r2
 8001634:	095b      	lsrs	r3, r3, #5
 8001636:	2164      	movs	r1, #100	@ 0x64
 8001638:	fb01 f303 	mul.w	r3, r1, r3
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	3332      	adds	r3, #50	@ 0x32
 8001642:	4a08      	ldr	r2, [pc, #32]	@ (8001664 <SetBaudrate+0x26c>)
 8001644:	fba2 2303 	umull	r2, r3, r2, r3
 8001648:	095b      	lsrs	r3, r3, #5
 800164a:	f003 0207 	and.w	r2, r3, #7
 800164e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4422      	add	r2, r4
 8001656:	609a      	str	r2, [r3, #8]
	  }
	  else
	  {
	    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
	  }
}
 8001658:	e106      	b.n	8001868 <SetBaudrate+0x470>
 800165a:	bf00      	nop
 800165c:	40011000 	.word	0x40011000
 8001660:	40011400 	.word	0x40011400
 8001664:	51eb851f 	.word	0x51eb851f
	    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800166c:	2200      	movs	r2, #0
 800166e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001672:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001676:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800167a:	4642      	mov	r2, r8
 800167c:	464b      	mov	r3, r9
 800167e:	1891      	adds	r1, r2, r2
 8001680:	6239      	str	r1, [r7, #32]
 8001682:	415b      	adcs	r3, r3
 8001684:	627b      	str	r3, [r7, #36]	@ 0x24
 8001686:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800168a:	4641      	mov	r1, r8
 800168c:	1854      	adds	r4, r2, r1
 800168e:	4649      	mov	r1, r9
 8001690:	eb43 0501 	adc.w	r5, r3, r1
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	00eb      	lsls	r3, r5, #3
 800169e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016a2:	00e2      	lsls	r2, r4, #3
 80016a4:	4614      	mov	r4, r2
 80016a6:	461d      	mov	r5, r3
 80016a8:	4643      	mov	r3, r8
 80016aa:	18e3      	adds	r3, r4, r3
 80016ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80016b0:	464b      	mov	r3, r9
 80016b2:	eb45 0303 	adc.w	r3, r5, r3
 80016b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80016ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80016c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80016d6:	4629      	mov	r1, r5
 80016d8:	008b      	lsls	r3, r1, #2
 80016da:	4621      	mov	r1, r4
 80016dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80016e0:	4621      	mov	r1, r4
 80016e2:	008a      	lsls	r2, r1, #2
 80016e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80016e8:	f7fe fdd2 	bl	8000290 <__aeabi_uldivmod>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4b60      	ldr	r3, [pc, #384]	@ (8001874 <SetBaudrate+0x47c>)
 80016f2:	fba3 2302 	umull	r2, r3, r3, r2
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	011c      	lsls	r4, r3, #4
 80016fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80016fe:	2200      	movs	r2, #0
 8001700:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001704:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001708:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800170c:	4642      	mov	r2, r8
 800170e:	464b      	mov	r3, r9
 8001710:	1891      	adds	r1, r2, r2
 8001712:	61b9      	str	r1, [r7, #24]
 8001714:	415b      	adcs	r3, r3
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800171c:	4641      	mov	r1, r8
 800171e:	1851      	adds	r1, r2, r1
 8001720:	6139      	str	r1, [r7, #16]
 8001722:	4649      	mov	r1, r9
 8001724:	414b      	adcs	r3, r1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001734:	4659      	mov	r1, fp
 8001736:	00cb      	lsls	r3, r1, #3
 8001738:	4651      	mov	r1, sl
 800173a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800173e:	4651      	mov	r1, sl
 8001740:	00ca      	lsls	r2, r1, #3
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	4603      	mov	r3, r0
 8001748:	4642      	mov	r2, r8
 800174a:	189b      	adds	r3, r3, r2
 800174c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001750:	464b      	mov	r3, r9
 8001752:	460a      	mov	r2, r1
 8001754:	eb42 0303 	adc.w	r3, r2, r3
 8001758:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800175c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001766:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001774:	4649      	mov	r1, r9
 8001776:	008b      	lsls	r3, r1, #2
 8001778:	4641      	mov	r1, r8
 800177a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800177e:	4641      	mov	r1, r8
 8001780:	008a      	lsls	r2, r1, #2
 8001782:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001786:	f7fe fd83 	bl	8000290 <__aeabi_uldivmod>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4611      	mov	r1, r2
 8001790:	4b38      	ldr	r3, [pc, #224]	@ (8001874 <SetBaudrate+0x47c>)
 8001792:	fba3 2301 	umull	r2, r3, r3, r1
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	2264      	movs	r2, #100	@ 0x64
 800179a:	fb02 f303 	mul.w	r3, r2, r3
 800179e:	1acb      	subs	r3, r1, r3
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	3332      	adds	r3, #50	@ 0x32
 80017a4:	4a33      	ldr	r2, [pc, #204]	@ (8001874 <SetBaudrate+0x47c>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	095b      	lsrs	r3, r3, #5
 80017ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017b0:	441c      	add	r4, r3
 80017b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80017b6:	2200      	movs	r2, #0
 80017b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80017ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80017bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80017c0:	4642      	mov	r2, r8
 80017c2:	464b      	mov	r3, r9
 80017c4:	1891      	adds	r1, r2, r2
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	415b      	adcs	r3, r3
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017d0:	4641      	mov	r1, r8
 80017d2:	1851      	adds	r1, r2, r1
 80017d4:	6039      	str	r1, [r7, #0]
 80017d6:	4649      	mov	r1, r9
 80017d8:	414b      	adcs	r3, r1
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80017e8:	4659      	mov	r1, fp
 80017ea:	00cb      	lsls	r3, r1, #3
 80017ec:	4651      	mov	r1, sl
 80017ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017f2:	4651      	mov	r1, sl
 80017f4:	00ca      	lsls	r2, r1, #3
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	4603      	mov	r3, r0
 80017fc:	4642      	mov	r2, r8
 80017fe:	189b      	adds	r3, r3, r2
 8001800:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001802:	464b      	mov	r3, r9
 8001804:	460a      	mov	r2, r1
 8001806:	eb42 0303 	adc.w	r3, r2, r3
 800180a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800180c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	663b      	str	r3, [r7, #96]	@ 0x60
 8001816:	667a      	str	r2, [r7, #100]	@ 0x64
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001824:	4649      	mov	r1, r9
 8001826:	008b      	lsls	r3, r1, #2
 8001828:	4641      	mov	r1, r8
 800182a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800182e:	4641      	mov	r1, r8
 8001830:	008a      	lsls	r2, r1, #2
 8001832:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001836:	f7fe fd2b 	bl	8000290 <__aeabi_uldivmod>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4b0d      	ldr	r3, [pc, #52]	@ (8001874 <SetBaudrate+0x47c>)
 8001840:	fba3 1302 	umull	r1, r3, r3, r2
 8001844:	095b      	lsrs	r3, r3, #5
 8001846:	2164      	movs	r1, #100	@ 0x64
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	3332      	adds	r3, #50	@ 0x32
 8001852:	4a08      	ldr	r2, [pc, #32]	@ (8001874 <SetBaudrate+0x47c>)
 8001854:	fba2 2303 	umull	r2, r3, r2, r3
 8001858:	095b      	lsrs	r3, r3, #5
 800185a:	f003 020f 	and.w	r2, r3, #15
 800185e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4422      	add	r2, r4
 8001866:	609a      	str	r2, [r3, #8]
}
 8001868:	bf00      	nop
 800186a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800186e:	46bd      	mov	sp, r7
 8001870:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001874:	51eb851f 	.word	0x51eb851f

08001878 <OneWire_Reset>:

ONEWIRE_Status OneWire_Reset(UART_HandleTypeDef *huart)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	ONEWIRE_Status status = ONEWIRE_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	73fb      	strb	r3, [r7, #15]
	uint8_t txByte = ONEWIRE_RESET_BYTE;
 8001884:	23f0      	movs	r3, #240	@ 0xf0
 8001886:	73bb      	strb	r3, [r7, #14]
	uint8_t rxByte = 0x00;
 8001888:	2300      	movs	r3, #0
 800188a:	737b      	strb	r3, [r7, #13]

	SetBaudrate(huart, ONEWIRE_RESET_BAUDRATE);
 800188c:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fdb1 	bl	80013f8 <SetBaudrate>

	HAL_UART_Transmit(huart, &txByte, 1, ONEWIRE_UART_TIMEOUT);
 8001896:	f107 010e 	add.w	r1, r7, #14
 800189a:	230a      	movs	r3, #10
 800189c:	2201      	movs	r2, #1
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f001 feec 	bl	800367c <HAL_UART_Transmit>
	HAL_UART_Receive(huart, &rxByte, 1, ONEWIRE_UART_TIMEOUT);
 80018a4:	f107 010d 	add.w	r1, r7, #13
 80018a8:	230a      	movs	r3, #10
 80018aa:	2201      	movs	r2, #1
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f001 ff70 	bl	8003792 <HAL_UART_Receive>

	SetBaudrate(huart, ONEWIRE_BAUDRATE);
 80018b2:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff fd9e 	bl	80013f8 <SetBaudrate>

	if (rxByte == txByte)
 80018bc:	7b7a      	ldrb	r2, [r7, #13]
 80018be:	7bbb      	ldrb	r3, [r7, #14]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d101      	bne.n	80018c8 <OneWire_Reset+0x50>
	{
		status = ONEWIRE_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <OneWire_ProcessBit>:

uint8_t OneWire_ProcessBit(UART_HandleTypeDef *huart, uint8_t bit)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b084      	sub	sp, #16
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	70fb      	strb	r3, [r7, #3]
	uint8_t txData = 0xFF;
 80018de:	23ff      	movs	r3, #255	@ 0xff
 80018e0:	73fb      	strb	r3, [r7, #15]
	uint8_t rxData = 0x00;
 80018e2:	2300      	movs	r3, #0
 80018e4:	73bb      	strb	r3, [r7, #14]

	if (bit == 0)
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <OneWire_ProcessBit+0x1e>
	{
		txData = 0x00;
 80018ec:	2300      	movs	r3, #0
 80018ee:	73fb      	strb	r3, [r7, #15]
	}

	HAL_UART_Transmit(huart, &txData, 1, ONEWIRE_UART_TIMEOUT);
 80018f0:	f107 010f 	add.w	r1, r7, #15
 80018f4:	230a      	movs	r3, #10
 80018f6:	2201      	movs	r2, #1
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f001 febf 	bl	800367c <HAL_UART_Transmit>
	HAL_UART_Receive(huart, &rxData, 1, ONEWIRE_UART_TIMEOUT);
 80018fe:	f107 010e 	add.w	r1, r7, #14
 8001902:	230a      	movs	r3, #10
 8001904:	2201      	movs	r2, #1
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f001 ff43 	bl	8003792 <HAL_UART_Receive>

	return rxData;
 800190c:	7bbb      	ldrb	r3, [r7, #14]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <OneWire_ProcessByte>:

uint8_t OneWire_ProcessByte(UART_HandleTypeDef *huart, uint8_t byte)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	70fb      	strb	r3, [r7, #3]
	uint8_t rxByte = 0x00;
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 8001926:	2300      	movs	r3, #0
 8001928:	73bb      	strb	r3, [r7, #14]
 800192a:	e022      	b.n	8001972 <OneWire_ProcessByte+0x5c>
	{
		uint8_t txBit = (byte >> i) & 0x01;
 800192c:	78fa      	ldrb	r2, [r7, #3]
 800192e:	7bbb      	ldrb	r3, [r7, #14]
 8001930:	fa42 f303 	asr.w	r3, r2, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	733b      	strb	r3, [r7, #12]
		uint8_t rxBit = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	737b      	strb	r3, [r7, #13]

		uint8_t tempRxData = OneWire_ProcessBit(huart, txBit);
 8001940:	7b3b      	ldrb	r3, [r7, #12]
 8001942:	4619      	mov	r1, r3
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ffc4 	bl	80018d2 <OneWire_ProcessBit>
 800194a:	4603      	mov	r3, r0
 800194c:	72fb      	strb	r3, [r7, #11]

		if (tempRxData == 0xFF)
 800194e:	7afb      	ldrb	r3, [r7, #11]
 8001950:	2bff      	cmp	r3, #255	@ 0xff
 8001952:	d101      	bne.n	8001958 <OneWire_ProcessByte+0x42>
			rxBit = 1;
 8001954:	2301      	movs	r3, #1
 8001956:	737b      	strb	r3, [r7, #13]

		rxByte |= (rxBit << i);
 8001958:	7b7a      	ldrb	r2, [r7, #13]
 800195a:	7bbb      	ldrb	r3, [r7, #14]
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	b25a      	sxtb	r2, r3
 8001962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001966:	4313      	orrs	r3, r2
 8001968:	b25b      	sxtb	r3, r3
 800196a:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 800196c:	7bbb      	ldrb	r3, [r7, #14]
 800196e:	3301      	adds	r3, #1
 8001970:	73bb      	strb	r3, [r7, #14]
 8001972:	7bbb      	ldrb	r3, [r7, #14]
 8001974:	2b07      	cmp	r3, #7
 8001976:	d9d9      	bls.n	800192c <OneWire_ProcessByte+0x16>
	}

	return rxByte;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <HAL_MspInit+0x4c>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	4a0f      	ldr	r2, [pc, #60]	@ (80019d0 <HAL_MspInit+0x4c>)
 8001994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001998:	6453      	str	r3, [r2, #68]	@ 0x44
 800199a:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <HAL_MspInit+0x4c>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <HAL_MspInit+0x4c>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	4a08      	ldr	r2, [pc, #32]	@ (80019d0 <HAL_MspInit+0x4c>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b6:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <HAL_MspInit+0x4c>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800

080019d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	@ 0x28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a19      	ldr	r2, [pc, #100]	@ (8001a58 <HAL_I2C_MspInit+0x84>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d12b      	bne.n	8001a4e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	4b18      	ldr	r3, [pc, #96]	@ (8001a5c <HAL_I2C_MspInit+0x88>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	4a17      	ldr	r2, [pc, #92]	@ (8001a5c <HAL_I2C_MspInit+0x88>)
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <HAL_I2C_MspInit+0x88>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a12:	23c0      	movs	r3, #192	@ 0xc0
 8001a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a16:	2312      	movs	r3, #18
 8001a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a22:	2304      	movs	r3, #4
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480c      	ldr	r0, [pc, #48]	@ (8001a60 <HAL_I2C_MspInit+0x8c>)
 8001a2e:	f000 fb3b 	bl	80020a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <HAL_I2C_MspInit+0x88>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	4a08      	ldr	r2, [pc, #32]	@ (8001a5c <HAL_I2C_MspInit+0x88>)
 8001a3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a42:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_I2C_MspInit+0x88>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a4e:	bf00      	nop
 8001a50:	3728      	adds	r7, #40	@ 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40005400 	.word	0x40005400
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020400 	.word	0x40020400

08001a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	@ 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a19      	ldr	r2, [pc, #100]	@ (8001ae8 <HAL_UART_MspInit+0x84>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d12c      	bne.n	8001ae0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	4b18      	ldr	r3, [pc, #96]	@ (8001aec <HAL_UART_MspInit+0x88>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	4a17      	ldr	r2, [pc, #92]	@ (8001aec <HAL_UART_MspInit+0x88>)
 8001a90:	f043 0320 	orr.w	r3, r3, #32
 8001a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <HAL_UART_MspInit+0x88>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <HAL_UART_MspInit+0x88>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a10      	ldr	r2, [pc, #64]	@ (8001aec <HAL_UART_MspInit+0x88>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_UART_MspInit+0x88>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001abe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac4:	2312      	movs	r3, #18
 8001ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ad0:	2308      	movs	r3, #8
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4805      	ldr	r0, [pc, #20]	@ (8001af0 <HAL_UART_MspInit+0x8c>)
 8001adc:	f000 fae4 	bl	80020a8 <HAL_GPIO_Init>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	@ 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40011400 	.word	0x40011400
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020000 	.word	0x40020000

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <NMI_Handler+0x4>

08001afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <HardFault_Handler+0x4>

08001b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <MemManage_Handler+0x4>

08001b0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <BusFault_Handler+0x4>

08001b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <UsageFault_Handler+0x4>

08001b1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4a:	f000 f957 	bl	8001dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  return 1;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <_kill>:

int _kill(int pid, int sig)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b6c:	f002 fb6a 	bl	8004244 <__errno>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2216      	movs	r2, #22
 8001b74:	601a      	str	r2, [r3, #0]
  return -1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <_exit>:

void _exit (int status)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b8a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffe7 	bl	8001b62 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <_exit+0x12>

08001b98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	e00a      	b.n	8001bc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001baa:	f3af 8000 	nop.w
 8001bae:	4601      	mov	r1, r0
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	60ba      	str	r2, [r7, #8]
 8001bb6:	b2ca      	uxtb	r2, r1
 8001bb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dbf0      	blt.n	8001baa <_read+0x12>
  }

  return len;
 8001bc8:	687b      	ldr	r3, [r7, #4]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e009      	b.n	8001bf8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60ba      	str	r2, [r7, #8]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbf1      	blt.n	8001be4 <_write+0x12>
  }
  return len;
 8001c00:	687b      	ldr	r3, [r7, #4]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_close>:

int _close(int file)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c32:	605a      	str	r2, [r3, #4]
  return 0;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_isatty>:

int _isatty(int file)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c7c:	4a14      	ldr	r2, [pc, #80]	@ (8001cd0 <_sbrk+0x5c>)
 8001c7e:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <_sbrk+0x60>)
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c88:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <_sbrk+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c90:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <_sbrk+0x64>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	@ (8001cdc <_sbrk+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c96:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d207      	bcs.n	8001cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca4:	f002 face 	bl	8004244 <__errno>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	220c      	movs	r2, #12
 8001cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	e009      	b.n	8001cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cba:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a05      	ldr	r2, [pc, #20]	@ (8001cd8 <_sbrk+0x64>)
 8001cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20010000 	.word	0x20010000
 8001cd4:	00000400 	.word	0x00000400
 8001cd8:	2000014c 	.word	0x2000014c
 8001cdc:	200002a0 	.word	0x200002a0

08001ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <SystemInit+0x20>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cea:	4a05      	ldr	r2, [pc, #20]	@ (8001d00 <SystemInit+0x20>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d08:	480d      	ldr	r0, [pc, #52]	@ (8001d40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d0a:	490e      	ldr	r1, [pc, #56]	@ (8001d44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d10:	e002      	b.n	8001d18 <LoopCopyDataInit>

08001d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d16:	3304      	adds	r3, #4

08001d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d1c:	d3f9      	bcc.n	8001d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001d4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d20:	4c0b      	ldr	r4, [pc, #44]	@ (8001d50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d24:	e001      	b.n	8001d2a <LoopFillZerobss>

08001d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d28:	3204      	adds	r2, #4

08001d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d2c:	d3fb      	bcc.n	8001d26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d2e:	f7ff ffd7 	bl	8001ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d32:	f002 fa8d 	bl	8004250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d36:	f7fe ffdb 	bl	8000cf0 <main>
  bx  lr    
 8001d3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d44:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001d48:	08005074 	.word	0x08005074
  ldr r2, =_sbss
 8001d4c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001d50:	200002a0 	.word	0x200002a0

08001d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d54:	e7fe      	b.n	8001d54 <ADC_IRQHandler>
	...

08001d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0d      	ldr	r2, [pc, #52]	@ (8001d98 <HAL_Init+0x40>)
 8001d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_Init+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <HAL_Init+0x40>)
 8001d6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d74:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <HAL_Init+0x40>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a07      	ldr	r2, [pc, #28]	@ (8001d98 <HAL_Init+0x40>)
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d80:	2003      	movs	r0, #3
 8001d82:	f000 f94f 	bl	8002024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d86:	200f      	movs	r0, #15
 8001d88:	f000 f808 	bl	8001d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d8c:	f7ff fdfa 	bl	8001984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023c00 	.word	0x40023c00

08001d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da4:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <HAL_InitTick+0x54>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <HAL_InitTick+0x58>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 f967 	bl	800208e <HAL_SYSTICK_Config>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00e      	b.n	8001de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b0f      	cmp	r3, #15
 8001dce:	d80a      	bhi.n	8001de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f000 f92f 	bl	800203a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ddc:	4a06      	ldr	r2, [pc, #24]	@ (8001df8 <HAL_InitTick+0x5c>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e000      	b.n	8001de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000028 	.word	0x20000028
 8001df4:	20000030 	.word	0x20000030
 8001df8:	2000002c 	.word	0x2000002c

08001dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_IncTick+0x20>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_IncTick+0x24>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a04      	ldr	r2, [pc, #16]	@ (8001e20 <HAL_IncTick+0x24>)
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000030 	.word	0x20000030
 8001e20:	20000150 	.word	0x20000150

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b03      	ldr	r3, [pc, #12]	@ (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000150 	.word	0x20000150

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff ffee 	bl	8001e24 <HAL_GetTick>
 8001e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d005      	beq.n	8001e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <HAL_Delay+0x44>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e62:	bf00      	nop
 8001e64:	f7ff ffde 	bl	8001e24 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d8f7      	bhi.n	8001e64 <HAL_Delay+0x28>
  {
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000030 	.word	0x20000030

08001e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	@ (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60d3      	str	r3, [r2, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed0:	4b04      	ldr	r3, [pc, #16]	@ (8001ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f003 0307 	and.w	r3, r3, #7
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	db0b      	blt.n	8001f12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	4907      	ldr	r1, [pc, #28]	@ (8001f20 <__NVIC_EnableIRQ+0x38>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	2001      	movs	r0, #1
 8001f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000e100 	.word	0xe000e100

08001f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	db0a      	blt.n	8001f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	490c      	ldr	r1, [pc, #48]	@ (8001f70 <__NVIC_SetPriority+0x4c>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f4c:	e00a      	b.n	8001f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4908      	ldr	r1, [pc, #32]	@ (8001f74 <__NVIC_SetPriority+0x50>)
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3b04      	subs	r3, #4
 8001f5c:	0112      	lsls	r2, r2, #4
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	440b      	add	r3, r1
 8001f62:	761a      	strb	r2, [r3, #24]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000e100 	.word	0xe000e100
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	@ 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f1c3 0307 	rsb	r3, r3, #7
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	bf28      	it	cs
 8001f96:	2304      	movcs	r3, #4
 8001f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d902      	bls.n	8001fa8 <NVIC_EncodePriority+0x30>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	e000      	b.n	8001faa <NVIC_EncodePriority+0x32>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	401a      	ands	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	4313      	orrs	r3, r2
         );
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3724      	adds	r7, #36	@ 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ff0:	d301      	bcc.n	8001ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00f      	b.n	8002016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8002020 <SysTick_Config+0x40>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffe:	210f      	movs	r1, #15
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	f7ff ff8e 	bl	8001f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002008:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <SysTick_Config+0x40>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200e:	4b04      	ldr	r3, [pc, #16]	@ (8002020 <SysTick_Config+0x40>)
 8002010:	2207      	movs	r2, #7
 8002012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	e000e010 	.word	0xe000e010

08002024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ff29 	bl	8001e84 <__NVIC_SetPriorityGrouping>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203a:	b580      	push	{r7, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800204c:	f7ff ff3e 	bl	8001ecc <__NVIC_GetPriorityGrouping>
 8002050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	6978      	ldr	r0, [r7, #20]
 8002058:	f7ff ff8e 	bl	8001f78 <NVIC_EncodePriority>
 800205c:	4602      	mov	r2, r0
 800205e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff5d 	bl	8001f24 <__NVIC_SetPriority>
}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff31 	bl	8001ee8 <__NVIC_EnableIRQ>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ffa2 	bl	8001fe0 <SysTick_Config>
 800209c:	4603      	mov	r3, r0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	@ 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	e159      	b.n	8002378 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020c4:	2201      	movs	r2, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	429a      	cmp	r2, r3
 80020de:	f040 8148 	bne.w	8002372 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d005      	beq.n	80020fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d130      	bne.n	800215c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	2203      	movs	r2, #3
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002130:	2201      	movs	r2, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 0201 	and.w	r2, r3, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b03      	cmp	r3, #3
 8002166:	d017      	beq.n	8002198 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d123      	bne.n	80021ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	08da      	lsrs	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3208      	adds	r2, #8
 80021ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	220f      	movs	r2, #15
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	08da      	lsrs	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3208      	adds	r2, #8
 80021e6:	69b9      	ldr	r1, [r7, #24]
 80021e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0203 	and.w	r2, r3, #3
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80a2 	beq.w	8002372 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b57      	ldr	r3, [pc, #348]	@ (8002390 <HAL_GPIO_Init+0x2e8>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002236:	4a56      	ldr	r2, [pc, #344]	@ (8002390 <HAL_GPIO_Init+0x2e8>)
 8002238:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800223c:	6453      	str	r3, [r2, #68]	@ 0x44
 800223e:	4b54      	ldr	r3, [pc, #336]	@ (8002390 <HAL_GPIO_Init+0x2e8>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800224a:	4a52      	ldr	r2, [pc, #328]	@ (8002394 <HAL_GPIO_Init+0x2ec>)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	089b      	lsrs	r3, r3, #2
 8002250:	3302      	adds	r3, #2
 8002252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	220f      	movs	r2, #15
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a49      	ldr	r2, [pc, #292]	@ (8002398 <HAL_GPIO_Init+0x2f0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d019      	beq.n	80022aa <HAL_GPIO_Init+0x202>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a48      	ldr	r2, [pc, #288]	@ (800239c <HAL_GPIO_Init+0x2f4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_GPIO_Init+0x1fe>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a47      	ldr	r2, [pc, #284]	@ (80023a0 <HAL_GPIO_Init+0x2f8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00d      	beq.n	80022a2 <HAL_GPIO_Init+0x1fa>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a46      	ldr	r2, [pc, #280]	@ (80023a4 <HAL_GPIO_Init+0x2fc>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d007      	beq.n	800229e <HAL_GPIO_Init+0x1f6>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a45      	ldr	r2, [pc, #276]	@ (80023a8 <HAL_GPIO_Init+0x300>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d101      	bne.n	800229a <HAL_GPIO_Init+0x1f2>
 8002296:	2304      	movs	r3, #4
 8002298:	e008      	b.n	80022ac <HAL_GPIO_Init+0x204>
 800229a:	2307      	movs	r3, #7
 800229c:	e006      	b.n	80022ac <HAL_GPIO_Init+0x204>
 800229e:	2303      	movs	r3, #3
 80022a0:	e004      	b.n	80022ac <HAL_GPIO_Init+0x204>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e002      	b.n	80022ac <HAL_GPIO_Init+0x204>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_GPIO_Init+0x204>
 80022aa:	2300      	movs	r3, #0
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	f002 0203 	and.w	r2, r2, #3
 80022b2:	0092      	lsls	r2, r2, #2
 80022b4:	4093      	lsls	r3, r2
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022bc:	4935      	ldr	r1, [pc, #212]	@ (8002394 <HAL_GPIO_Init+0x2ec>)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	3302      	adds	r3, #2
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ca:	4b38      	ldr	r3, [pc, #224]	@ (80023ac <HAL_GPIO_Init+0x304>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ee:	4a2f      	ldr	r2, [pc, #188]	@ (80023ac <HAL_GPIO_Init+0x304>)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f4:	4b2d      	ldr	r3, [pc, #180]	@ (80023ac <HAL_GPIO_Init+0x304>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002318:	4a24      	ldr	r2, [pc, #144]	@ (80023ac <HAL_GPIO_Init+0x304>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800231e:	4b23      	ldr	r3, [pc, #140]	@ (80023ac <HAL_GPIO_Init+0x304>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002342:	4a1a      	ldr	r2, [pc, #104]	@ (80023ac <HAL_GPIO_Init+0x304>)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002348:	4b18      	ldr	r3, [pc, #96]	@ (80023ac <HAL_GPIO_Init+0x304>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800236c:	4a0f      	ldr	r2, [pc, #60]	@ (80023ac <HAL_GPIO_Init+0x304>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3301      	adds	r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	2b0f      	cmp	r3, #15
 800237c:	f67f aea2 	bls.w	80020c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	3724      	adds	r7, #36	@ 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800
 8002394:	40013800 	.word	0x40013800
 8002398:	40020000 	.word	0x40020000
 800239c:	40020400 	.word	0x40020400
 80023a0:	40020800 	.word	0x40020800
 80023a4:	40020c00 	.word	0x40020c00
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40013c00 	.word	0x40013c00

080023b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023ba:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d006      	beq.n	80023d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023c6:	4a05      	ldr	r2, [pc, #20]	@ (80023dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe fea2 	bl	8001118 <HAL_GPIO_EXTI_Callback>
  }
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40013c00 	.word	0x40013c00

080023e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e12b      	b.n	800264a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff fae4 	bl	80019d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2224      	movs	r2, #36	@ 0x24
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0201 	bic.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002432:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002442:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002444:	f001 f89a 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 8002448:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4a81      	ldr	r2, [pc, #516]	@ (8002654 <HAL_I2C_Init+0x274>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d807      	bhi.n	8002464 <HAL_I2C_Init+0x84>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4a80      	ldr	r2, [pc, #512]	@ (8002658 <HAL_I2C_Init+0x278>)
 8002458:	4293      	cmp	r3, r2
 800245a:	bf94      	ite	ls
 800245c:	2301      	movls	r3, #1
 800245e:	2300      	movhi	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	e006      	b.n	8002472 <HAL_I2C_Init+0x92>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4a7d      	ldr	r2, [pc, #500]	@ (800265c <HAL_I2C_Init+0x27c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	bf94      	ite	ls
 800246c:	2301      	movls	r3, #1
 800246e:	2300      	movhi	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e0e7      	b.n	800264a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4a78      	ldr	r2, [pc, #480]	@ (8002660 <HAL_I2C_Init+0x280>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	0c9b      	lsrs	r3, r3, #18
 8002484:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002654 <HAL_I2C_Init+0x274>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d802      	bhi.n	80024b4 <HAL_I2C_Init+0xd4>
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	3301      	adds	r3, #1
 80024b2:	e009      	b.n	80024c8 <HAL_I2C_Init+0xe8>
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80024ba:	fb02 f303 	mul.w	r3, r2, r3
 80024be:	4a69      	ldr	r2, [pc, #420]	@ (8002664 <HAL_I2C_Init+0x284>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	099b      	lsrs	r3, r3, #6
 80024c6:	3301      	adds	r3, #1
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	430b      	orrs	r3, r1
 80024ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80024da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	495c      	ldr	r1, [pc, #368]	@ (8002654 <HAL_I2C_Init+0x274>)
 80024e4:	428b      	cmp	r3, r1
 80024e6:	d819      	bhi.n	800251c <HAL_I2C_Init+0x13c>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1e59      	subs	r1, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80024f6:	1c59      	adds	r1, r3, #1
 80024f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024fc:	400b      	ands	r3, r1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <HAL_I2C_Init+0x138>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1e59      	subs	r1, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002510:	3301      	adds	r3, #1
 8002512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002516:	e051      	b.n	80025bc <HAL_I2C_Init+0x1dc>
 8002518:	2304      	movs	r3, #4
 800251a:	e04f      	b.n	80025bc <HAL_I2C_Init+0x1dc>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d111      	bne.n	8002548 <HAL_I2C_Init+0x168>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1e58      	subs	r0, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6859      	ldr	r1, [r3, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	440b      	add	r3, r1
 8002532:	fbb0 f3f3 	udiv	r3, r0, r3
 8002536:	3301      	adds	r3, #1
 8002538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253c:	2b00      	cmp	r3, #0
 800253e:	bf0c      	ite	eq
 8002540:	2301      	moveq	r3, #1
 8002542:	2300      	movne	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	e012      	b.n	800256e <HAL_I2C_Init+0x18e>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1e58      	subs	r0, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6859      	ldr	r1, [r3, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	0099      	lsls	r1, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	fbb0 f3f3 	udiv	r3, r0, r3
 800255e:	3301      	adds	r3, #1
 8002560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_I2C_Init+0x196>
 8002572:	2301      	movs	r3, #1
 8002574:	e022      	b.n	80025bc <HAL_I2C_Init+0x1dc>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10e      	bne.n	800259c <HAL_I2C_Init+0x1bc>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1e58      	subs	r0, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6859      	ldr	r1, [r3, #4]
 8002586:	460b      	mov	r3, r1
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	440b      	add	r3, r1
 800258c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002590:	3301      	adds	r3, #1
 8002592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800259a:	e00f      	b.n	80025bc <HAL_I2C_Init+0x1dc>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1e58      	subs	r0, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	0099      	lsls	r1, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b2:	3301      	adds	r3, #1
 80025b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	6809      	ldr	r1, [r1, #0]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69da      	ldr	r2, [r3, #28]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6911      	ldr	r1, [r2, #16]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68d2      	ldr	r2, [r2, #12]
 80025f6:	4311      	orrs	r1, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	430b      	orrs	r3, r1
 80025fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695a      	ldr	r2, [r3, #20]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2220      	movs	r2, #32
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	000186a0 	.word	0x000186a0
 8002658:	001e847f 	.word	0x001e847f
 800265c:	003d08ff 	.word	0x003d08ff
 8002660:	431bde83 	.word	0x431bde83
 8002664:	10624dd3 	.word	0x10624dd3

08002668 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af02      	add	r7, sp, #8
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	461a      	mov	r2, r3
 8002674:	460b      	mov	r3, r1
 8002676:	817b      	strh	r3, [r7, #10]
 8002678:	4613      	mov	r3, r2
 800267a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800267c:	f7ff fbd2 	bl	8001e24 <HAL_GetTick>
 8002680:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b20      	cmp	r3, #32
 800268c:	f040 80e0 	bne.w	8002850 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	2319      	movs	r3, #25
 8002696:	2201      	movs	r2, #1
 8002698:	4970      	ldr	r1, [pc, #448]	@ (800285c <HAL_I2C_Master_Transmit+0x1f4>)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f964 	bl	8002968 <I2C_WaitOnFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026a6:	2302      	movs	r3, #2
 80026a8:	e0d3      	b.n	8002852 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_I2C_Master_Transmit+0x50>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e0cc      	b.n	8002852 <HAL_I2C_Master_Transmit+0x1ea>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d007      	beq.n	80026de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0201 	orr.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2221      	movs	r2, #33	@ 0x21
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2210      	movs	r2, #16
 80026fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	893a      	ldrh	r2, [r7, #8]
 800270e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4a50      	ldr	r2, [pc, #320]	@ (8002860 <HAL_I2C_Master_Transmit+0x1f8>)
 800271e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002720:	8979      	ldrh	r1, [r7, #10]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	6a3a      	ldr	r2, [r7, #32]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 f89c 	bl	8002864 <I2C_MasterRequestWrite>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e08d      	b.n	8002852 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800274c:	e066      	b.n	800281c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	6a39      	ldr	r1, [r7, #32]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fa22 	bl	8002b9c <I2C_WaitOnTXEFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00d      	beq.n	800277a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	2b04      	cmp	r3, #4
 8002764:	d107      	bne.n	8002776 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002774:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e06b      	b.n	8002852 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277e:	781a      	ldrb	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d11b      	bne.n	80027f0 <HAL_I2C_Master_Transmit+0x188>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d017      	beq.n	80027f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c4:	781a      	ldrb	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	6a39      	ldr	r1, [r7, #32]
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fa19 	bl	8002c2c <I2C_WaitOnBTFFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00d      	beq.n	800281c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	2b04      	cmp	r3, #4
 8002806:	d107      	bne.n	8002818 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002816:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e01a      	b.n	8002852 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002820:	2b00      	cmp	r3, #0
 8002822:	d194      	bne.n	800274e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	e000      	b.n	8002852 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002850:	2302      	movs	r3, #2
  }
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	00100002 	.word	0x00100002
 8002860:	ffff0000 	.word	0xffff0000

08002864 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	460b      	mov	r3, r1
 8002872:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002878:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b08      	cmp	r3, #8
 800287e:	d006      	beq.n	800288e <I2C_MasterRequestWrite+0x2a>
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d003      	beq.n	800288e <I2C_MasterRequestWrite+0x2a>
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800288c:	d108      	bne.n	80028a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e00b      	b.n	80028b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a4:	2b12      	cmp	r3, #18
 80028a6:	d107      	bne.n	80028b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f84f 	bl	8002968 <I2C_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00d      	beq.n	80028ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028de:	d103      	bne.n	80028e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e035      	b.n	8002958 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028f4:	d108      	bne.n	8002908 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028f6:	897b      	ldrh	r3, [r7, #10]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002904:	611a      	str	r2, [r3, #16]
 8002906:	e01b      	b.n	8002940 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002908:	897b      	ldrh	r3, [r7, #10]
 800290a:	11db      	asrs	r3, r3, #7
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f003 0306 	and.w	r3, r3, #6
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f063 030f 	orn	r3, r3, #15
 8002918:	b2da      	uxtb	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	490e      	ldr	r1, [pc, #56]	@ (8002960 <I2C_MasterRequestWrite+0xfc>)
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 f898 	bl	8002a5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e010      	b.n	8002958 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002936:	897b      	ldrh	r3, [r7, #10]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4907      	ldr	r1, [pc, #28]	@ (8002964 <I2C_MasterRequestWrite+0x100>)
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f888 	bl	8002a5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	00010008 	.word	0x00010008
 8002964:	00010002 	.word	0x00010002

08002968 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	4613      	mov	r3, r2
 8002976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002978:	e048      	b.n	8002a0c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002980:	d044      	beq.n	8002a0c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002982:	f7ff fa4f 	bl	8001e24 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d302      	bcc.n	8002998 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d139      	bne.n	8002a0c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	0c1b      	lsrs	r3, r3, #16
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d10d      	bne.n	80029be <I2C_WaitOnFlagUntilTimeout+0x56>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	43da      	mvns	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4013      	ands	r3, r2
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	e00c      	b.n	80029d8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	43da      	mvns	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4013      	ands	r3, r2
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d116      	bne.n	8002a0c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	f043 0220 	orr.w	r2, r3, #32
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e023      	b.n	8002a54 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	0c1b      	lsrs	r3, r3, #16
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d10d      	bne.n	8002a32 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	43da      	mvns	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	4013      	ands	r3, r2
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	e00c      	b.n	8002a4c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	43da      	mvns	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf0c      	ite	eq
 8002a44:	2301      	moveq	r3, #1
 8002a46:	2300      	movne	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d093      	beq.n	800297a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a6a:	e071      	b.n	8002b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a7a:	d123      	bne.n	8002ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a8a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	f043 0204 	orr.w	r2, r3, #4
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e067      	b.n	8002b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aca:	d041      	beq.n	8002b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002acc:	f7ff f9aa 	bl	8001e24 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d302      	bcc.n	8002ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d136      	bne.n	8002b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	0c1b      	lsrs	r3, r3, #16
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d10c      	bne.n	8002b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	43da      	mvns	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4013      	ands	r3, r2
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	bf14      	ite	ne
 8002afe:	2301      	movne	r3, #1
 8002b00:	2300      	moveq	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	e00b      	b.n	8002b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	43da      	mvns	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	4013      	ands	r3, r2
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf14      	ite	ne
 8002b18:	2301      	movne	r3, #1
 8002b1a:	2300      	moveq	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d016      	beq.n	8002b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3c:	f043 0220 	orr.w	r2, r3, #32
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e021      	b.n	8002b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	0c1b      	lsrs	r3, r3, #16
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d10c      	bne.n	8002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	43da      	mvns	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4013      	ands	r3, r2
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bf14      	ite	ne
 8002b6c:	2301      	movne	r3, #1
 8002b6e:	2300      	moveq	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	e00b      	b.n	8002b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	bf14      	ite	ne
 8002b86:	2301      	movne	r3, #1
 8002b88:	2300      	moveq	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f47f af6d 	bne.w	8002a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ba8:	e034      	b.n	8002c14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f886 	bl	8002cbc <I2C_IsAcknowledgeFailed>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e034      	b.n	8002c24 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d028      	beq.n	8002c14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc2:	f7ff f92f 	bl	8001e24 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d302      	bcc.n	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d11d      	bne.n	8002c14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be2:	2b80      	cmp	r3, #128	@ 0x80
 8002be4:	d016      	beq.n	8002c14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	f043 0220 	orr.w	r2, r3, #32
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e007      	b.n	8002c24 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1e:	2b80      	cmp	r3, #128	@ 0x80
 8002c20:	d1c3      	bne.n	8002baa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c38:	e034      	b.n	8002ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f83e 	bl	8002cbc <I2C_IsAcknowledgeFailed>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e034      	b.n	8002cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d028      	beq.n	8002ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c52:	f7ff f8e7 	bl	8001e24 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d302      	bcc.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d11d      	bne.n	8002ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d016      	beq.n	8002ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	f043 0220 	orr.w	r2, r3, #32
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e007      	b.n	8002cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d1c3      	bne.n	8002c3a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cd2:	d11b      	bne.n	8002d0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cdc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	f043 0204 	orr.w	r2, r3, #4
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e267      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d075      	beq.n	8002e26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d3a:	4b88      	ldr	r3, [pc, #544]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d00c      	beq.n	8002d60 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d46:	4b85      	ldr	r3, [pc, #532]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d112      	bne.n	8002d78 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d52:	4b82      	ldr	r3, [pc, #520]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d5e:	d10b      	bne.n	8002d78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	4b7e      	ldr	r3, [pc, #504]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d05b      	beq.n	8002e24 <HAL_RCC_OscConfig+0x108>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d157      	bne.n	8002e24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e242      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d80:	d106      	bne.n	8002d90 <HAL_RCC_OscConfig+0x74>
 8002d82:	4b76      	ldr	r3, [pc, #472]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a75      	ldr	r2, [pc, #468]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e01d      	b.n	8002dcc <HAL_RCC_OscConfig+0xb0>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x98>
 8002d9a:	4b70      	ldr	r3, [pc, #448]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a6f      	ldr	r2, [pc, #444]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	4b6d      	ldr	r3, [pc, #436]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a6c      	ldr	r2, [pc, #432]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e00b      	b.n	8002dcc <HAL_RCC_OscConfig+0xb0>
 8002db4:	4b69      	ldr	r3, [pc, #420]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a68      	ldr	r2, [pc, #416]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	4b66      	ldr	r3, [pc, #408]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a65      	ldr	r2, [pc, #404]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002dc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d013      	beq.n	8002dfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7ff f826 	bl	8001e24 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7ff f822 	bl	8001e24 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	@ 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e207      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dee:	4b5b      	ldr	r3, [pc, #364]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0xc0>
 8002dfa:	e014      	b.n	8002e26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7ff f812 	bl	8001e24 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e04:	f7ff f80e 	bl	8001e24 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	@ 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e1f3      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e16:	4b51      	ldr	r3, [pc, #324]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0xe8>
 8002e22:	e000      	b.n	8002e26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d063      	beq.n	8002efa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e32:	4b4a      	ldr	r3, [pc, #296]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00b      	beq.n	8002e56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e3e:	4b47      	ldr	r3, [pc, #284]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d11c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e4a:	4b44      	ldr	r3, [pc, #272]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d116      	bne.n	8002e84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e56:	4b41      	ldr	r3, [pc, #260]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <HAL_RCC_OscConfig+0x152>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d001      	beq.n	8002e6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e1c7      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4937      	ldr	r1, [pc, #220]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e82:	e03a      	b.n	8002efa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d020      	beq.n	8002ece <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e8c:	4b34      	ldr	r3, [pc, #208]	@ (8002f60 <HAL_RCC_OscConfig+0x244>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e92:	f7fe ffc7 	bl	8001e24 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e9a:	f7fe ffc3 	bl	8001e24 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e1a8      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eac:	4b2b      	ldr	r3, [pc, #172]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb8:	4b28      	ldr	r3, [pc, #160]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4925      	ldr	r1, [pc, #148]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	600b      	str	r3, [r1, #0]
 8002ecc:	e015      	b.n	8002efa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ece:	4b24      	ldr	r3, [pc, #144]	@ (8002f60 <HAL_RCC_OscConfig+0x244>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7fe ffa6 	bl	8001e24 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002edc:	f7fe ffa2 	bl	8001e24 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e187      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eee:	4b1b      	ldr	r3, [pc, #108]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d036      	beq.n	8002f74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d016      	beq.n	8002f3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0e:	4b15      	ldr	r3, [pc, #84]	@ (8002f64 <HAL_RCC_OscConfig+0x248>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7fe ff86 	bl	8001e24 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f1c:	f7fe ff82 	bl	8001e24 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e167      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002f30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x200>
 8002f3a:	e01b      	b.n	8002f74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f3c:	4b09      	ldr	r3, [pc, #36]	@ (8002f64 <HAL_RCC_OscConfig+0x248>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f42:	f7fe ff6f 	bl	8001e24 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f48:	e00e      	b.n	8002f68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f4a:	f7fe ff6b 	bl	8001e24 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d907      	bls.n	8002f68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e150      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	42470000 	.word	0x42470000
 8002f64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f68:	4b88      	ldr	r3, [pc, #544]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8002f6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1ea      	bne.n	8002f4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8097 	beq.w	80030b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f82:	2300      	movs	r3, #0
 8002f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f86:	4b81      	ldr	r3, [pc, #516]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10f      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	4b7d      	ldr	r3, [pc, #500]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	4a7c      	ldr	r2, [pc, #496]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fa2:	4b7a      	ldr	r3, [pc, #488]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb2:	4b77      	ldr	r3, [pc, #476]	@ (8003190 <HAL_RCC_OscConfig+0x474>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d118      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fbe:	4b74      	ldr	r3, [pc, #464]	@ (8003190 <HAL_RCC_OscConfig+0x474>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a73      	ldr	r2, [pc, #460]	@ (8003190 <HAL_RCC_OscConfig+0x474>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fca:	f7fe ff2b 	bl	8001e24 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd2:	f7fe ff27 	bl	8001e24 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e10c      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe4:	4b6a      	ldr	r3, [pc, #424]	@ (8003190 <HAL_RCC_OscConfig+0x474>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d106      	bne.n	8003006 <HAL_RCC_OscConfig+0x2ea>
 8002ff8:	4b64      	ldr	r3, [pc, #400]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffc:	4a63      	ldr	r2, [pc, #396]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6713      	str	r3, [r2, #112]	@ 0x70
 8003004:	e01c      	b.n	8003040 <HAL_RCC_OscConfig+0x324>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b05      	cmp	r3, #5
 800300c:	d10c      	bne.n	8003028 <HAL_RCC_OscConfig+0x30c>
 800300e:	4b5f      	ldr	r3, [pc, #380]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003012:	4a5e      	ldr	r2, [pc, #376]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8003014:	f043 0304 	orr.w	r3, r3, #4
 8003018:	6713      	str	r3, [r2, #112]	@ 0x70
 800301a:	4b5c      	ldr	r3, [pc, #368]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301e:	4a5b      	ldr	r2, [pc, #364]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6713      	str	r3, [r2, #112]	@ 0x70
 8003026:	e00b      	b.n	8003040 <HAL_RCC_OscConfig+0x324>
 8003028:	4b58      	ldr	r3, [pc, #352]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302c:	4a57      	ldr	r2, [pc, #348]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 800302e:	f023 0301 	bic.w	r3, r3, #1
 8003032:	6713      	str	r3, [r2, #112]	@ 0x70
 8003034:	4b55      	ldr	r3, [pc, #340]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003038:	4a54      	ldr	r2, [pc, #336]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 800303a:	f023 0304 	bic.w	r3, r3, #4
 800303e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d015      	beq.n	8003074 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003048:	f7fe feec 	bl	8001e24 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304e:	e00a      	b.n	8003066 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003050:	f7fe fee8 	bl	8001e24 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e0cb      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003066:	4b49      	ldr	r3, [pc, #292]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0ee      	beq.n	8003050 <HAL_RCC_OscConfig+0x334>
 8003072:	e014      	b.n	800309e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003074:	f7fe fed6 	bl	8001e24 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307a:	e00a      	b.n	8003092 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307c:	f7fe fed2 	bl	8001e24 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e0b5      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003092:	4b3e      	ldr	r3, [pc, #248]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1ee      	bne.n	800307c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800309e:	7dfb      	ldrb	r3, [r7, #23]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d105      	bne.n	80030b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a4:	4b39      	ldr	r3, [pc, #228]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	4a38      	ldr	r2, [pc, #224]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 80030aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80a1 	beq.w	80031fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ba:	4b34      	ldr	r3, [pc, #208]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d05c      	beq.n	8003180 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d141      	bne.n	8003152 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ce:	4b31      	ldr	r3, [pc, #196]	@ (8003194 <HAL_RCC_OscConfig+0x478>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7fe fea6 	bl	8001e24 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030dc:	f7fe fea2 	bl	8001e24 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e087      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ee:	4b27      	ldr	r3, [pc, #156]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69da      	ldr	r2, [r3, #28]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	019b      	lsls	r3, r3, #6
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003110:	085b      	lsrs	r3, r3, #1
 8003112:	3b01      	subs	r3, #1
 8003114:	041b      	lsls	r3, r3, #16
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311c:	061b      	lsls	r3, r3, #24
 800311e:	491b      	ldr	r1, [pc, #108]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003124:	4b1b      	ldr	r3, [pc, #108]	@ (8003194 <HAL_RCC_OscConfig+0x478>)
 8003126:	2201      	movs	r2, #1
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312a:	f7fe fe7b 	bl	8001e24 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003132:	f7fe fe77 	bl	8001e24 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e05c      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003144:	4b11      	ldr	r3, [pc, #68]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x416>
 8003150:	e054      	b.n	80031fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003152:	4b10      	ldr	r3, [pc, #64]	@ (8003194 <HAL_RCC_OscConfig+0x478>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7fe fe64 	bl	8001e24 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003160:	f7fe fe60 	bl	8001e24 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e045      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003172:	4b06      	ldr	r3, [pc, #24]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x444>
 800317e:	e03d      	b.n	80031fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d107      	bne.n	8003198 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e038      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
 800318c:	40023800 	.word	0x40023800
 8003190:	40007000 	.word	0x40007000
 8003194:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003198:	4b1b      	ldr	r3, [pc, #108]	@ (8003208 <HAL_RCC_OscConfig+0x4ec>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d028      	beq.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d121      	bne.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031be:	429a      	cmp	r2, r3
 80031c0:	d11a      	bne.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031c8:	4013      	ands	r3, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d111      	bne.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031de:	085b      	lsrs	r3, r3, #1
 80031e0:	3b01      	subs	r3, #1
 80031e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d107      	bne.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800

0800320c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0cc      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003220:	4b68      	ldr	r3, [pc, #416]	@ (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d90c      	bls.n	8003248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b65      	ldr	r3, [pc, #404]	@ (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003236:	4b63      	ldr	r3, [pc, #396]	@ (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0b8      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d020      	beq.n	8003296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003260:	4b59      	ldr	r3, [pc, #356]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4a58      	ldr	r2, [pc, #352]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800326a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003278:	4b53      	ldr	r3, [pc, #332]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a52      	ldr	r2, [pc, #328]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003284:	4b50      	ldr	r3, [pc, #320]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	494d      	ldr	r1, [pc, #308]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d044      	beq.n	800332c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	4b47      	ldr	r3, [pc, #284]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d119      	bne.n	80032ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e07f      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d003      	beq.n	80032ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ca:	4b3f      	ldr	r3, [pc, #252]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e06f      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032da:	4b3b      	ldr	r3, [pc, #236]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e067      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ea:	4b37      	ldr	r3, [pc, #220]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f023 0203 	bic.w	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4934      	ldr	r1, [pc, #208]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032fc:	f7fe fd92 	bl	8001e24 <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	e00a      	b.n	800331a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003304:	f7fe fd8e 	bl	8001e24 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e04f      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	4b2b      	ldr	r3, [pc, #172]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 020c 	and.w	r2, r3, #12
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	429a      	cmp	r2, r3
 800332a:	d1eb      	bne.n	8003304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800332c:	4b25      	ldr	r3, [pc, #148]	@ (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d20c      	bcs.n	8003354 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333a:	4b22      	ldr	r3, [pc, #136]	@ (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003342:	4b20      	ldr	r3, [pc, #128]	@ (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e032      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003360:	4b19      	ldr	r3, [pc, #100]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4916      	ldr	r1, [pc, #88]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d009      	beq.n	8003392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800337e:	4b12      	ldr	r3, [pc, #72]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	490e      	ldr	r1, [pc, #56]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003392:	f000 f821 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8003396:	4602      	mov	r2, r0
 8003398:	4b0b      	ldr	r3, [pc, #44]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	490a      	ldr	r1, [pc, #40]	@ (80033cc <HAL_RCC_ClockConfig+0x1c0>)
 80033a4:	5ccb      	ldrb	r3, [r1, r3]
 80033a6:	fa22 f303 	lsr.w	r3, r2, r3
 80033aa:	4a09      	ldr	r2, [pc, #36]	@ (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80033ae:	4b09      	ldr	r3, [pc, #36]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fcf2 	bl	8001d9c <HAL_InitTick>

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023c00 	.word	0x40023c00
 80033c8:	40023800 	.word	0x40023800
 80033cc:	08004f6c 	.word	0x08004f6c
 80033d0:	20000028 	.word	0x20000028
 80033d4:	2000002c 	.word	0x2000002c

080033d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033dc:	b090      	sub	sp, #64	@ 0x40
 80033de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f0:	4b59      	ldr	r3, [pc, #356]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x180>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 030c 	and.w	r3, r3, #12
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d00d      	beq.n	8003418 <HAL_RCC_GetSysClockFreq+0x40>
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	f200 80a1 	bhi.w	8003544 <HAL_RCC_GetSysClockFreq+0x16c>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x34>
 8003406:	2b04      	cmp	r3, #4
 8003408:	d003      	beq.n	8003412 <HAL_RCC_GetSysClockFreq+0x3a>
 800340a:	e09b      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800340c:	4b53      	ldr	r3, [pc, #332]	@ (800355c <HAL_RCC_GetSysClockFreq+0x184>)
 800340e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003410:	e09b      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003412:	4b53      	ldr	r3, [pc, #332]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x188>)
 8003414:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003416:	e098      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003418:	4b4f      	ldr	r3, [pc, #316]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x180>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003420:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003422:	4b4d      	ldr	r3, [pc, #308]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x180>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d028      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342e:	4b4a      	ldr	r3, [pc, #296]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x180>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	099b      	lsrs	r3, r3, #6
 8003434:	2200      	movs	r2, #0
 8003436:	623b      	str	r3, [r7, #32]
 8003438:	627a      	str	r2, [r7, #36]	@ 0x24
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003440:	2100      	movs	r1, #0
 8003442:	4b47      	ldr	r3, [pc, #284]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x188>)
 8003444:	fb03 f201 	mul.w	r2, r3, r1
 8003448:	2300      	movs	r3, #0
 800344a:	fb00 f303 	mul.w	r3, r0, r3
 800344e:	4413      	add	r3, r2
 8003450:	4a43      	ldr	r2, [pc, #268]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x188>)
 8003452:	fba0 1202 	umull	r1, r2, r0, r2
 8003456:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003458:	460a      	mov	r2, r1
 800345a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800345c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800345e:	4413      	add	r3, r2
 8003460:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003464:	2200      	movs	r2, #0
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	61fa      	str	r2, [r7, #28]
 800346a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800346e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003472:	f7fc ff0d 	bl	8000290 <__aeabi_uldivmod>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4613      	mov	r3, r2
 800347c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800347e:	e053      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003480:	4b35      	ldr	r3, [pc, #212]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x180>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	099b      	lsrs	r3, r3, #6
 8003486:	2200      	movs	r2, #0
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	617a      	str	r2, [r7, #20]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003492:	f04f 0b00 	mov.w	fp, #0
 8003496:	4652      	mov	r2, sl
 8003498:	465b      	mov	r3, fp
 800349a:	f04f 0000 	mov.w	r0, #0
 800349e:	f04f 0100 	mov.w	r1, #0
 80034a2:	0159      	lsls	r1, r3, #5
 80034a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a8:	0150      	lsls	r0, r2, #5
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	ebb2 080a 	subs.w	r8, r2, sl
 80034b2:	eb63 090b 	sbc.w	r9, r3, fp
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034ca:	ebb2 0408 	subs.w	r4, r2, r8
 80034ce:	eb63 0509 	sbc.w	r5, r3, r9
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	00eb      	lsls	r3, r5, #3
 80034dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034e0:	00e2      	lsls	r2, r4, #3
 80034e2:	4614      	mov	r4, r2
 80034e4:	461d      	mov	r5, r3
 80034e6:	eb14 030a 	adds.w	r3, r4, sl
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	eb45 030b 	adc.w	r3, r5, fp
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034fe:	4629      	mov	r1, r5
 8003500:	028b      	lsls	r3, r1, #10
 8003502:	4621      	mov	r1, r4
 8003504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003508:	4621      	mov	r1, r4
 800350a:	028a      	lsls	r2, r1, #10
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003512:	2200      	movs	r2, #0
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	60fa      	str	r2, [r7, #12]
 8003518:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800351c:	f7fc feb8 	bl	8000290 <__aeabi_uldivmod>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4613      	mov	r3, r2
 8003526:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003528:	4b0b      	ldr	r3, [pc, #44]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x180>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	0c1b      	lsrs	r3, r3, #16
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	3301      	adds	r3, #1
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003538:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800353a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003542:	e002      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b05      	ldr	r3, [pc, #20]	@ (800355c <HAL_RCC_GetSysClockFreq+0x184>)
 8003546:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800354c:	4618      	mov	r0, r3
 800354e:	3740      	adds	r7, #64	@ 0x40
 8003550:	46bd      	mov	sp, r7
 8003552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	00f42400 	.word	0x00f42400
 8003560:	017d7840 	.word	0x017d7840

08003564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003568:	4b03      	ldr	r3, [pc, #12]	@ (8003578 <HAL_RCC_GetHCLKFreq+0x14>)
 800356a:	681b      	ldr	r3, [r3, #0]
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20000028 	.word	0x20000028

0800357c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003580:	f7ff fff0 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b05      	ldr	r3, [pc, #20]	@ (800359c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	0a9b      	lsrs	r3, r3, #10
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4903      	ldr	r1, [pc, #12]	@ (80035a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40023800 	.word	0x40023800
 80035a0:	08004f7c 	.word	0x08004f7c

080035a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035a8:	f7ff ffdc 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	0b5b      	lsrs	r3, r3, #13
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	4903      	ldr	r1, [pc, #12]	@ (80035c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ba:	5ccb      	ldrb	r3, [r1, r3]
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40023800 	.word	0x40023800
 80035c8:	08004f7c 	.word	0x08004f7c

080035cc <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e04a      	b.n	8003674 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fe fa36 	bl	8001a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2224      	movs	r2, #36	@ 0x24
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800360e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fa11 	bl	8003a38 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003624:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695a      	ldr	r2, [r3, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8003634:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0208 	orr.w	r2, r2, #8
 8003644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08a      	sub	sp, #40	@ 0x28
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	4613      	mov	r3, r2
 800368a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b20      	cmp	r3, #32
 800369a:	d175      	bne.n	8003788 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_UART_Transmit+0x2c>
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e06e      	b.n	800378a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2221      	movs	r2, #33	@ 0x21
 80036b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ba:	f7fe fbb3 	bl	8001e24 <HAL_GetTick>
 80036be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	88fa      	ldrh	r2, [r7, #6]
 80036c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	88fa      	ldrh	r2, [r7, #6]
 80036ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036d4:	d108      	bne.n	80036e8 <HAL_UART_Transmit+0x6c>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d104      	bne.n	80036e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	61bb      	str	r3, [r7, #24]
 80036e6:	e003      	b.n	80036f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036f0:	e02e      	b.n	8003750 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2200      	movs	r2, #0
 80036fa:	2180      	movs	r1, #128	@ 0x80
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 f8df 	bl	80038c0 <UART_WaitOnFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e03a      	b.n	800378a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10b      	bne.n	8003732 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003728:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	3302      	adds	r3, #2
 800372e:	61bb      	str	r3, [r7, #24]
 8003730:	e007      	b.n	8003742 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	781a      	ldrb	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	3301      	adds	r3, #1
 8003740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1cb      	bne.n	80036f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2200      	movs	r2, #0
 8003762:	2140      	movs	r1, #64	@ 0x40
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f8ab 	bl	80038c0 <UART_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e006      	b.n	800378a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	e000      	b.n	800378a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003788:	2302      	movs	r3, #2
  }
}
 800378a:	4618      	mov	r0, r3
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b08a      	sub	sp, #40	@ 0x28
 8003796:	af02      	add	r7, sp, #8
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	603b      	str	r3, [r7, #0]
 800379e:	4613      	mov	r3, r2
 80037a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	f040 8081 	bne.w	80038b6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_UART_Receive+0x2e>
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e079      	b.n	80038b8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2222      	movs	r2, #34	@ 0x22
 80037ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037d8:	f7fe fb24 	bl	8001e24 <HAL_GetTick>
 80037dc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	88fa      	ldrh	r2, [r7, #6]
 80037e2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	88fa      	ldrh	r2, [r7, #6]
 80037e8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f2:	d108      	bne.n	8003806 <HAL_UART_Receive+0x74>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d104      	bne.n	8003806 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	e003      	b.n	800380e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800380a:	2300      	movs	r3, #0
 800380c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800380e:	e047      	b.n	80038a0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2200      	movs	r2, #0
 8003818:	2120      	movs	r1, #32
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f850 	bl	80038c0 <UART_WaitOnFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e042      	b.n	80038b8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10c      	bne.n	8003852 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	b29b      	uxth	r3, r3
 8003840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003844:	b29a      	uxth	r2, r3
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	3302      	adds	r3, #2
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	e01f      	b.n	8003892 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800385a:	d007      	beq.n	800386c <HAL_UART_Receive+0xda>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <HAL_UART_Receive+0xe8>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d106      	bne.n	800387a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	b2da      	uxtb	r2, r3
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	701a      	strb	r2, [r3, #0]
 8003878:	e008      	b.n	800388c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003886:	b2da      	uxtb	r2, r3
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	3301      	adds	r3, #1
 8003890:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1b2      	bne.n	8003810 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e000      	b.n	80038b8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80038b6:	2302      	movs	r3, #2
  }
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3720      	adds	r7, #32
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	4613      	mov	r3, r2
 80038ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d0:	e03b      	b.n	800394a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d037      	beq.n	800394a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038da:	f7fe faa3 	bl	8001e24 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	6a3a      	ldr	r2, [r7, #32]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d302      	bcc.n	80038f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e03a      	b.n	800396a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d023      	beq.n	800394a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b80      	cmp	r3, #128	@ 0x80
 8003906:	d020      	beq.n	800394a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b40      	cmp	r3, #64	@ 0x40
 800390c:	d01d      	beq.n	800394a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b08      	cmp	r3, #8
 800391a:	d116      	bne.n	800394a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f81d 	bl	8003972 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2208      	movs	r2, #8
 800393c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e00f      	b.n	800396a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4013      	ands	r3, r2
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	429a      	cmp	r2, r3
 8003958:	bf0c      	ite	eq
 800395a:	2301      	moveq	r3, #1
 800395c:	2300      	movne	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	461a      	mov	r2, r3
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	429a      	cmp	r2, r3
 8003966:	d0b4      	beq.n	80038d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003972:	b480      	push	{r7}
 8003974:	b095      	sub	sp, #84	@ 0x54
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003984:	e853 3f00 	ldrex	r3, [r3]
 8003988:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800398a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003990:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	330c      	adds	r3, #12
 8003998:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800399a:	643a      	str	r2, [r7, #64]	@ 0x40
 800399c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e5      	bne.n	800397a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3314      	adds	r3, #20
 80039b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3314      	adds	r3, #20
 80039cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039d6:	e841 2300 	strex	r3, r2, [r1]
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1e5      	bne.n	80039ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d119      	bne.n	8003a1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f023 0310 	bic.w	r3, r3, #16
 8003a00:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	330c      	adds	r3, #12
 8003a08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a0a:	61ba      	str	r2, [r7, #24]
 8003a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	6979      	ldr	r1, [r7, #20]
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	613b      	str	r3, [r7, #16]
   return(result);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e5      	bne.n	80039ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a2c:	bf00      	nop
 8003a2e:	3754      	adds	r7, #84	@ 0x54
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a3c:	b0c0      	sub	sp, #256	@ 0x100
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a54:	68d9      	ldr	r1, [r3, #12]
 8003a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	ea40 0301 	orr.w	r3, r0, r1
 8003a60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a90:	f021 010c 	bic.w	r1, r1, #12
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab2:	6999      	ldr	r1, [r3, #24]
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	ea40 0301 	orr.w	r3, r0, r1
 8003abe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	4b8f      	ldr	r3, [pc, #572]	@ (8003d04 <UART_SetConfig+0x2cc>)
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d005      	beq.n	8003ad8 <UART_SetConfig+0xa0>
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b8d      	ldr	r3, [pc, #564]	@ (8003d08 <UART_SetConfig+0x2d0>)
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d104      	bne.n	8003ae2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ad8:	f7ff fd64 	bl	80035a4 <HAL_RCC_GetPCLK2Freq>
 8003adc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ae0:	e003      	b.n	8003aea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ae2:	f7ff fd4b 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 8003ae6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003af4:	f040 810c 	bne.w	8003d10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003afc:	2200      	movs	r2, #0
 8003afe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b0a:	4622      	mov	r2, r4
 8003b0c:	462b      	mov	r3, r5
 8003b0e:	1891      	adds	r1, r2, r2
 8003b10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b12:	415b      	adcs	r3, r3
 8003b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	eb12 0801 	adds.w	r8, r2, r1
 8003b20:	4629      	mov	r1, r5
 8003b22:	eb43 0901 	adc.w	r9, r3, r1
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b3a:	4690      	mov	r8, r2
 8003b3c:	4699      	mov	r9, r3
 8003b3e:	4623      	mov	r3, r4
 8003b40:	eb18 0303 	adds.w	r3, r8, r3
 8003b44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b48:	462b      	mov	r3, r5
 8003b4a:	eb49 0303 	adc.w	r3, r9, r3
 8003b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b66:	460b      	mov	r3, r1
 8003b68:	18db      	adds	r3, r3, r3
 8003b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	eb42 0303 	adc.w	r3, r2, r3
 8003b72:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b7c:	f7fc fb88 	bl	8000290 <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4b61      	ldr	r3, [pc, #388]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003b86:	fba3 2302 	umull	r2, r3, r3, r2
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	011c      	lsls	r4, r3, #4
 8003b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ba0:	4642      	mov	r2, r8
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	1891      	adds	r1, r2, r2
 8003ba6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ba8:	415b      	adcs	r3, r3
 8003baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003bb0:	4641      	mov	r1, r8
 8003bb2:	eb12 0a01 	adds.w	sl, r2, r1
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	eb43 0b01 	adc.w	fp, r3, r1
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bd0:	4692      	mov	sl, r2
 8003bd2:	469b      	mov	fp, r3
 8003bd4:	4643      	mov	r3, r8
 8003bd6:	eb1a 0303 	adds.w	r3, sl, r3
 8003bda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bde:	464b      	mov	r3, r9
 8003be0:	eb4b 0303 	adc.w	r3, fp, r3
 8003be4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bf4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003bf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	18db      	adds	r3, r3, r3
 8003c00:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c02:	4613      	mov	r3, r2
 8003c04:	eb42 0303 	adc.w	r3, r2, r3
 8003c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c12:	f7fc fb3d 	bl	8000290 <__aeabi_uldivmod>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003c1e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	2264      	movs	r2, #100	@ 0x64
 8003c26:	fb02 f303 	mul.w	r3, r2, r3
 8003c2a:	1acb      	subs	r3, r1, r3
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c32:	4b36      	ldr	r3, [pc, #216]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003c34:	fba3 2302 	umull	r2, r3, r3, r2
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c40:	441c      	add	r4, r3
 8003c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c4c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c54:	4642      	mov	r2, r8
 8003c56:	464b      	mov	r3, r9
 8003c58:	1891      	adds	r1, r2, r2
 8003c5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c5c:	415b      	adcs	r3, r3
 8003c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c64:	4641      	mov	r1, r8
 8003c66:	1851      	adds	r1, r2, r1
 8003c68:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	414b      	adcs	r3, r1
 8003c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c7c:	4659      	mov	r1, fp
 8003c7e:	00cb      	lsls	r3, r1, #3
 8003c80:	4651      	mov	r1, sl
 8003c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c86:	4651      	mov	r1, sl
 8003c88:	00ca      	lsls	r2, r1, #3
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4642      	mov	r2, r8
 8003c92:	189b      	adds	r3, r3, r2
 8003c94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c98:	464b      	mov	r3, r9
 8003c9a:	460a      	mov	r2, r1
 8003c9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003cb0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003cb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003cb8:	460b      	mov	r3, r1
 8003cba:	18db      	adds	r3, r3, r3
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	eb42 0303 	adc.w	r3, r2, r3
 8003cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003cce:	f7fc fadf 	bl	8000290 <__aeabi_uldivmod>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	2164      	movs	r1, #100	@ 0x64
 8003ce0:	fb01 f303 	mul.w	r3, r1, r3
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	3332      	adds	r3, #50	@ 0x32
 8003cea:	4a08      	ldr	r2, [pc, #32]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	f003 0207 	and.w	r2, r3, #7
 8003cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4422      	add	r2, r4
 8003cfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d00:	e106      	b.n	8003f10 <UART_SetConfig+0x4d8>
 8003d02:	bf00      	nop
 8003d04:	40011000 	.word	0x40011000
 8003d08:	40011400 	.word	0x40011400
 8003d0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d1a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d22:	4642      	mov	r2, r8
 8003d24:	464b      	mov	r3, r9
 8003d26:	1891      	adds	r1, r2, r2
 8003d28:	6239      	str	r1, [r7, #32]
 8003d2a:	415b      	adcs	r3, r3
 8003d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d32:	4641      	mov	r1, r8
 8003d34:	1854      	adds	r4, r2, r1
 8003d36:	4649      	mov	r1, r9
 8003d38:	eb43 0501 	adc.w	r5, r3, r1
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	00eb      	lsls	r3, r5, #3
 8003d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d4a:	00e2      	lsls	r2, r4, #3
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	461d      	mov	r5, r3
 8003d50:	4643      	mov	r3, r8
 8003d52:	18e3      	adds	r3, r4, r3
 8003d54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d58:	464b      	mov	r3, r9
 8003d5a:	eb45 0303 	adc.w	r3, r5, r3
 8003d5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d6e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d7e:	4629      	mov	r1, r5
 8003d80:	008b      	lsls	r3, r1, #2
 8003d82:	4621      	mov	r1, r4
 8003d84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d88:	4621      	mov	r1, r4
 8003d8a:	008a      	lsls	r2, r1, #2
 8003d8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d90:	f7fc fa7e 	bl	8000290 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4b60      	ldr	r3, [pc, #384]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	011c      	lsls	r4, r3, #4
 8003da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003dac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003db0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003db4:	4642      	mov	r2, r8
 8003db6:	464b      	mov	r3, r9
 8003db8:	1891      	adds	r1, r2, r2
 8003dba:	61b9      	str	r1, [r7, #24]
 8003dbc:	415b      	adcs	r3, r3
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dc4:	4641      	mov	r1, r8
 8003dc6:	1851      	adds	r1, r2, r1
 8003dc8:	6139      	str	r1, [r7, #16]
 8003dca:	4649      	mov	r1, r9
 8003dcc:	414b      	adcs	r3, r1
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ddc:	4659      	mov	r1, fp
 8003dde:	00cb      	lsls	r3, r1, #3
 8003de0:	4651      	mov	r1, sl
 8003de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003de6:	4651      	mov	r1, sl
 8003de8:	00ca      	lsls	r2, r1, #3
 8003dea:	4610      	mov	r0, r2
 8003dec:	4619      	mov	r1, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	4642      	mov	r2, r8
 8003df2:	189b      	adds	r3, r3, r2
 8003df4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003df8:	464b      	mov	r3, r9
 8003dfa:	460a      	mov	r2, r1
 8003dfc:	eb42 0303 	adc.w	r3, r2, r3
 8003e00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e0e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e1c:	4649      	mov	r1, r9
 8003e1e:	008b      	lsls	r3, r1, #2
 8003e20:	4641      	mov	r1, r8
 8003e22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e26:	4641      	mov	r1, r8
 8003e28:	008a      	lsls	r2, r1, #2
 8003e2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e2e:	f7fc fa2f 	bl	8000290 <__aeabi_uldivmod>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4611      	mov	r1, r2
 8003e38:	4b38      	ldr	r3, [pc, #224]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003e3a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	2264      	movs	r2, #100	@ 0x64
 8003e42:	fb02 f303 	mul.w	r3, r2, r3
 8003e46:	1acb      	subs	r3, r1, r3
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	3332      	adds	r3, #50	@ 0x32
 8003e4c:	4a33      	ldr	r2, [pc, #204]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e58:	441c      	add	r4, r3
 8003e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e5e:	2200      	movs	r2, #0
 8003e60:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e62:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e68:	4642      	mov	r2, r8
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	1891      	adds	r1, r2, r2
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	415b      	adcs	r3, r3
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e78:	4641      	mov	r1, r8
 8003e7a:	1851      	adds	r1, r2, r1
 8003e7c:	6039      	str	r1, [r7, #0]
 8003e7e:	4649      	mov	r1, r9
 8003e80:	414b      	adcs	r3, r1
 8003e82:	607b      	str	r3, [r7, #4]
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e90:	4659      	mov	r1, fp
 8003e92:	00cb      	lsls	r3, r1, #3
 8003e94:	4651      	mov	r1, sl
 8003e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e9a:	4651      	mov	r1, sl
 8003e9c:	00ca      	lsls	r2, r1, #3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	189b      	adds	r3, r3, r2
 8003ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003eaa:	464b      	mov	r3, r9
 8003eac:	460a      	mov	r2, r1
 8003eae:	eb42 0303 	adc.w	r3, r2, r3
 8003eb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ebe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ecc:	4649      	mov	r1, r9
 8003ece:	008b      	lsls	r3, r1, #2
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ed6:	4641      	mov	r1, r8
 8003ed8:	008a      	lsls	r2, r1, #2
 8003eda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ede:	f7fc f9d7 	bl	8000290 <__aeabi_uldivmod>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	2164      	movs	r1, #100	@ 0x64
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	3332      	adds	r3, #50	@ 0x32
 8003efa:	4a08      	ldr	r2, [pc, #32]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003efc:	fba2 2303 	umull	r2, r3, r2, r3
 8003f00:	095b      	lsrs	r3, r3, #5
 8003f02:	f003 020f 	and.w	r2, r3, #15
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4422      	add	r2, r4
 8003f0e:	609a      	str	r2, [r3, #8]
}
 8003f10:	bf00      	nop
 8003f12:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f16:	46bd      	mov	sp, r7
 8003f18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f1c:	51eb851f 	.word	0x51eb851f

08003f20 <rand>:
 8003f20:	4b16      	ldr	r3, [pc, #88]	@ (8003f7c <rand+0x5c>)
 8003f22:	b510      	push	{r4, lr}
 8003f24:	681c      	ldr	r4, [r3, #0]
 8003f26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003f28:	b9b3      	cbnz	r3, 8003f58 <rand+0x38>
 8003f2a:	2018      	movs	r0, #24
 8003f2c:	f000 fa20 	bl	8004370 <malloc>
 8003f30:	4602      	mov	r2, r0
 8003f32:	6320      	str	r0, [r4, #48]	@ 0x30
 8003f34:	b920      	cbnz	r0, 8003f40 <rand+0x20>
 8003f36:	4b12      	ldr	r3, [pc, #72]	@ (8003f80 <rand+0x60>)
 8003f38:	4812      	ldr	r0, [pc, #72]	@ (8003f84 <rand+0x64>)
 8003f3a:	2152      	movs	r1, #82	@ 0x52
 8003f3c:	f000 f9b0 	bl	80042a0 <__assert_func>
 8003f40:	4911      	ldr	r1, [pc, #68]	@ (8003f88 <rand+0x68>)
 8003f42:	4b12      	ldr	r3, [pc, #72]	@ (8003f8c <rand+0x6c>)
 8003f44:	e9c0 1300 	strd	r1, r3, [r0]
 8003f48:	4b11      	ldr	r3, [pc, #68]	@ (8003f90 <rand+0x70>)
 8003f4a:	6083      	str	r3, [r0, #8]
 8003f4c:	230b      	movs	r3, #11
 8003f4e:	8183      	strh	r3, [r0, #12]
 8003f50:	2100      	movs	r1, #0
 8003f52:	2001      	movs	r0, #1
 8003f54:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003f58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003f5a:	480e      	ldr	r0, [pc, #56]	@ (8003f94 <rand+0x74>)
 8003f5c:	690b      	ldr	r3, [r1, #16]
 8003f5e:	694c      	ldr	r4, [r1, #20]
 8003f60:	4a0d      	ldr	r2, [pc, #52]	@ (8003f98 <rand+0x78>)
 8003f62:	4358      	muls	r0, r3
 8003f64:	fb02 0004 	mla	r0, r2, r4, r0
 8003f68:	fba3 3202 	umull	r3, r2, r3, r2
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	eb40 0002 	adc.w	r0, r0, r2
 8003f72:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003f76:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003f7a:	bd10      	pop	{r4, pc}
 8003f7c:	20000040 	.word	0x20000040
 8003f80:	08004f84 	.word	0x08004f84
 8003f84:	08004f9b 	.word	0x08004f9b
 8003f88:	abcd330e 	.word	0xabcd330e
 8003f8c:	e66d1234 	.word	0xe66d1234
 8003f90:	0005deec 	.word	0x0005deec
 8003f94:	5851f42d 	.word	0x5851f42d
 8003f98:	4c957f2d 	.word	0x4c957f2d

08003f9c <std>:
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	b510      	push	{r4, lr}
 8003fa0:	4604      	mov	r4, r0
 8003fa2:	e9c0 3300 	strd	r3, r3, [r0]
 8003fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003faa:	6083      	str	r3, [r0, #8]
 8003fac:	8181      	strh	r1, [r0, #12]
 8003fae:	6643      	str	r3, [r0, #100]	@ 0x64
 8003fb0:	81c2      	strh	r2, [r0, #14]
 8003fb2:	6183      	str	r3, [r0, #24]
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	2208      	movs	r2, #8
 8003fb8:	305c      	adds	r0, #92	@ 0x5c
 8003fba:	f000 f8f4 	bl	80041a6 <memset>
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff4 <std+0x58>)
 8003fc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff8 <std+0x5c>)
 8003fc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003ffc <std+0x60>)
 8003fc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003fca:	4b0d      	ldr	r3, [pc, #52]	@ (8004000 <std+0x64>)
 8003fcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8003fce:	4b0d      	ldr	r3, [pc, #52]	@ (8004004 <std+0x68>)
 8003fd0:	6224      	str	r4, [r4, #32]
 8003fd2:	429c      	cmp	r4, r3
 8003fd4:	d006      	beq.n	8003fe4 <std+0x48>
 8003fd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003fda:	4294      	cmp	r4, r2
 8003fdc:	d002      	beq.n	8003fe4 <std+0x48>
 8003fde:	33d0      	adds	r3, #208	@ 0xd0
 8003fe0:	429c      	cmp	r4, r3
 8003fe2:	d105      	bne.n	8003ff0 <std+0x54>
 8003fe4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fec:	f000 b954 	b.w	8004298 <__retarget_lock_init_recursive>
 8003ff0:	bd10      	pop	{r4, pc}
 8003ff2:	bf00      	nop
 8003ff4:	08004121 	.word	0x08004121
 8003ff8:	08004143 	.word	0x08004143
 8003ffc:	0800417b 	.word	0x0800417b
 8004000:	0800419f 	.word	0x0800419f
 8004004:	20000154 	.word	0x20000154

08004008 <stdio_exit_handler>:
 8004008:	4a02      	ldr	r2, [pc, #8]	@ (8004014 <stdio_exit_handler+0xc>)
 800400a:	4903      	ldr	r1, [pc, #12]	@ (8004018 <stdio_exit_handler+0x10>)
 800400c:	4803      	ldr	r0, [pc, #12]	@ (800401c <stdio_exit_handler+0x14>)
 800400e:	f000 b869 	b.w	80040e4 <_fwalk_sglue>
 8004012:	bf00      	nop
 8004014:	20000034 	.word	0x20000034
 8004018:	080045e5 	.word	0x080045e5
 800401c:	20000044 	.word	0x20000044

08004020 <cleanup_stdio>:
 8004020:	6841      	ldr	r1, [r0, #4]
 8004022:	4b0c      	ldr	r3, [pc, #48]	@ (8004054 <cleanup_stdio+0x34>)
 8004024:	4299      	cmp	r1, r3
 8004026:	b510      	push	{r4, lr}
 8004028:	4604      	mov	r4, r0
 800402a:	d001      	beq.n	8004030 <cleanup_stdio+0x10>
 800402c:	f000 fada 	bl	80045e4 <_fflush_r>
 8004030:	68a1      	ldr	r1, [r4, #8]
 8004032:	4b09      	ldr	r3, [pc, #36]	@ (8004058 <cleanup_stdio+0x38>)
 8004034:	4299      	cmp	r1, r3
 8004036:	d002      	beq.n	800403e <cleanup_stdio+0x1e>
 8004038:	4620      	mov	r0, r4
 800403a:	f000 fad3 	bl	80045e4 <_fflush_r>
 800403e:	68e1      	ldr	r1, [r4, #12]
 8004040:	4b06      	ldr	r3, [pc, #24]	@ (800405c <cleanup_stdio+0x3c>)
 8004042:	4299      	cmp	r1, r3
 8004044:	d004      	beq.n	8004050 <cleanup_stdio+0x30>
 8004046:	4620      	mov	r0, r4
 8004048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800404c:	f000 baca 	b.w	80045e4 <_fflush_r>
 8004050:	bd10      	pop	{r4, pc}
 8004052:	bf00      	nop
 8004054:	20000154 	.word	0x20000154
 8004058:	200001bc 	.word	0x200001bc
 800405c:	20000224 	.word	0x20000224

08004060 <global_stdio_init.part.0>:
 8004060:	b510      	push	{r4, lr}
 8004062:	4b0b      	ldr	r3, [pc, #44]	@ (8004090 <global_stdio_init.part.0+0x30>)
 8004064:	4c0b      	ldr	r4, [pc, #44]	@ (8004094 <global_stdio_init.part.0+0x34>)
 8004066:	4a0c      	ldr	r2, [pc, #48]	@ (8004098 <global_stdio_init.part.0+0x38>)
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	4620      	mov	r0, r4
 800406c:	2200      	movs	r2, #0
 800406e:	2104      	movs	r1, #4
 8004070:	f7ff ff94 	bl	8003f9c <std>
 8004074:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004078:	2201      	movs	r2, #1
 800407a:	2109      	movs	r1, #9
 800407c:	f7ff ff8e 	bl	8003f9c <std>
 8004080:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004084:	2202      	movs	r2, #2
 8004086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800408a:	2112      	movs	r1, #18
 800408c:	f7ff bf86 	b.w	8003f9c <std>
 8004090:	2000028c 	.word	0x2000028c
 8004094:	20000154 	.word	0x20000154
 8004098:	08004009 	.word	0x08004009

0800409c <__sfp_lock_acquire>:
 800409c:	4801      	ldr	r0, [pc, #4]	@ (80040a4 <__sfp_lock_acquire+0x8>)
 800409e:	f000 b8fc 	b.w	800429a <__retarget_lock_acquire_recursive>
 80040a2:	bf00      	nop
 80040a4:	20000295 	.word	0x20000295

080040a8 <__sfp_lock_release>:
 80040a8:	4801      	ldr	r0, [pc, #4]	@ (80040b0 <__sfp_lock_release+0x8>)
 80040aa:	f000 b8f7 	b.w	800429c <__retarget_lock_release_recursive>
 80040ae:	bf00      	nop
 80040b0:	20000295 	.word	0x20000295

080040b4 <__sinit>:
 80040b4:	b510      	push	{r4, lr}
 80040b6:	4604      	mov	r4, r0
 80040b8:	f7ff fff0 	bl	800409c <__sfp_lock_acquire>
 80040bc:	6a23      	ldr	r3, [r4, #32]
 80040be:	b11b      	cbz	r3, 80040c8 <__sinit+0x14>
 80040c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040c4:	f7ff bff0 	b.w	80040a8 <__sfp_lock_release>
 80040c8:	4b04      	ldr	r3, [pc, #16]	@ (80040dc <__sinit+0x28>)
 80040ca:	6223      	str	r3, [r4, #32]
 80040cc:	4b04      	ldr	r3, [pc, #16]	@ (80040e0 <__sinit+0x2c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f5      	bne.n	80040c0 <__sinit+0xc>
 80040d4:	f7ff ffc4 	bl	8004060 <global_stdio_init.part.0>
 80040d8:	e7f2      	b.n	80040c0 <__sinit+0xc>
 80040da:	bf00      	nop
 80040dc:	08004021 	.word	0x08004021
 80040e0:	2000028c 	.word	0x2000028c

080040e4 <_fwalk_sglue>:
 80040e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040e8:	4607      	mov	r7, r0
 80040ea:	4688      	mov	r8, r1
 80040ec:	4614      	mov	r4, r2
 80040ee:	2600      	movs	r6, #0
 80040f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040f4:	f1b9 0901 	subs.w	r9, r9, #1
 80040f8:	d505      	bpl.n	8004106 <_fwalk_sglue+0x22>
 80040fa:	6824      	ldr	r4, [r4, #0]
 80040fc:	2c00      	cmp	r4, #0
 80040fe:	d1f7      	bne.n	80040f0 <_fwalk_sglue+0xc>
 8004100:	4630      	mov	r0, r6
 8004102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004106:	89ab      	ldrh	r3, [r5, #12]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d907      	bls.n	800411c <_fwalk_sglue+0x38>
 800410c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004110:	3301      	adds	r3, #1
 8004112:	d003      	beq.n	800411c <_fwalk_sglue+0x38>
 8004114:	4629      	mov	r1, r5
 8004116:	4638      	mov	r0, r7
 8004118:	47c0      	blx	r8
 800411a:	4306      	orrs	r6, r0
 800411c:	3568      	adds	r5, #104	@ 0x68
 800411e:	e7e9      	b.n	80040f4 <_fwalk_sglue+0x10>

08004120 <__sread>:
 8004120:	b510      	push	{r4, lr}
 8004122:	460c      	mov	r4, r1
 8004124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004128:	f000 f868 	bl	80041fc <_read_r>
 800412c:	2800      	cmp	r0, #0
 800412e:	bfab      	itete	ge
 8004130:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004132:	89a3      	ldrhlt	r3, [r4, #12]
 8004134:	181b      	addge	r3, r3, r0
 8004136:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800413a:	bfac      	ite	ge
 800413c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800413e:	81a3      	strhlt	r3, [r4, #12]
 8004140:	bd10      	pop	{r4, pc}

08004142 <__swrite>:
 8004142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004146:	461f      	mov	r7, r3
 8004148:	898b      	ldrh	r3, [r1, #12]
 800414a:	05db      	lsls	r3, r3, #23
 800414c:	4605      	mov	r5, r0
 800414e:	460c      	mov	r4, r1
 8004150:	4616      	mov	r6, r2
 8004152:	d505      	bpl.n	8004160 <__swrite+0x1e>
 8004154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004158:	2302      	movs	r3, #2
 800415a:	2200      	movs	r2, #0
 800415c:	f000 f83c 	bl	80041d8 <_lseek_r>
 8004160:	89a3      	ldrh	r3, [r4, #12]
 8004162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004166:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800416a:	81a3      	strh	r3, [r4, #12]
 800416c:	4632      	mov	r2, r6
 800416e:	463b      	mov	r3, r7
 8004170:	4628      	mov	r0, r5
 8004172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004176:	f000 b853 	b.w	8004220 <_write_r>

0800417a <__sseek>:
 800417a:	b510      	push	{r4, lr}
 800417c:	460c      	mov	r4, r1
 800417e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004182:	f000 f829 	bl	80041d8 <_lseek_r>
 8004186:	1c43      	adds	r3, r0, #1
 8004188:	89a3      	ldrh	r3, [r4, #12]
 800418a:	bf15      	itete	ne
 800418c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800418e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004192:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004196:	81a3      	strheq	r3, [r4, #12]
 8004198:	bf18      	it	ne
 800419a:	81a3      	strhne	r3, [r4, #12]
 800419c:	bd10      	pop	{r4, pc}

0800419e <__sclose>:
 800419e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041a2:	f000 b809 	b.w	80041b8 <_close_r>

080041a6 <memset>:
 80041a6:	4402      	add	r2, r0
 80041a8:	4603      	mov	r3, r0
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d100      	bne.n	80041b0 <memset+0xa>
 80041ae:	4770      	bx	lr
 80041b0:	f803 1b01 	strb.w	r1, [r3], #1
 80041b4:	e7f9      	b.n	80041aa <memset+0x4>
	...

080041b8 <_close_r>:
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	4d06      	ldr	r5, [pc, #24]	@ (80041d4 <_close_r+0x1c>)
 80041bc:	2300      	movs	r3, #0
 80041be:	4604      	mov	r4, r0
 80041c0:	4608      	mov	r0, r1
 80041c2:	602b      	str	r3, [r5, #0]
 80041c4:	f7fd fd21 	bl	8001c0a <_close>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d102      	bne.n	80041d2 <_close_r+0x1a>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	b103      	cbz	r3, 80041d2 <_close_r+0x1a>
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	20000290 	.word	0x20000290

080041d8 <_lseek_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	4d07      	ldr	r5, [pc, #28]	@ (80041f8 <_lseek_r+0x20>)
 80041dc:	4604      	mov	r4, r0
 80041de:	4608      	mov	r0, r1
 80041e0:	4611      	mov	r1, r2
 80041e2:	2200      	movs	r2, #0
 80041e4:	602a      	str	r2, [r5, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	f7fd fd36 	bl	8001c58 <_lseek>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d102      	bne.n	80041f6 <_lseek_r+0x1e>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	b103      	cbz	r3, 80041f6 <_lseek_r+0x1e>
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	20000290 	.word	0x20000290

080041fc <_read_r>:
 80041fc:	b538      	push	{r3, r4, r5, lr}
 80041fe:	4d07      	ldr	r5, [pc, #28]	@ (800421c <_read_r+0x20>)
 8004200:	4604      	mov	r4, r0
 8004202:	4608      	mov	r0, r1
 8004204:	4611      	mov	r1, r2
 8004206:	2200      	movs	r2, #0
 8004208:	602a      	str	r2, [r5, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	f7fd fcc4 	bl	8001b98 <_read>
 8004210:	1c43      	adds	r3, r0, #1
 8004212:	d102      	bne.n	800421a <_read_r+0x1e>
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	b103      	cbz	r3, 800421a <_read_r+0x1e>
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	bd38      	pop	{r3, r4, r5, pc}
 800421c:	20000290 	.word	0x20000290

08004220 <_write_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	4d07      	ldr	r5, [pc, #28]	@ (8004240 <_write_r+0x20>)
 8004224:	4604      	mov	r4, r0
 8004226:	4608      	mov	r0, r1
 8004228:	4611      	mov	r1, r2
 800422a:	2200      	movs	r2, #0
 800422c:	602a      	str	r2, [r5, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	f7fd fccf 	bl	8001bd2 <_write>
 8004234:	1c43      	adds	r3, r0, #1
 8004236:	d102      	bne.n	800423e <_write_r+0x1e>
 8004238:	682b      	ldr	r3, [r5, #0]
 800423a:	b103      	cbz	r3, 800423e <_write_r+0x1e>
 800423c:	6023      	str	r3, [r4, #0]
 800423e:	bd38      	pop	{r3, r4, r5, pc}
 8004240:	20000290 	.word	0x20000290

08004244 <__errno>:
 8004244:	4b01      	ldr	r3, [pc, #4]	@ (800424c <__errno+0x8>)
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	20000040 	.word	0x20000040

08004250 <__libc_init_array>:
 8004250:	b570      	push	{r4, r5, r6, lr}
 8004252:	4d0d      	ldr	r5, [pc, #52]	@ (8004288 <__libc_init_array+0x38>)
 8004254:	4c0d      	ldr	r4, [pc, #52]	@ (800428c <__libc_init_array+0x3c>)
 8004256:	1b64      	subs	r4, r4, r5
 8004258:	10a4      	asrs	r4, r4, #2
 800425a:	2600      	movs	r6, #0
 800425c:	42a6      	cmp	r6, r4
 800425e:	d109      	bne.n	8004274 <__libc_init_array+0x24>
 8004260:	4d0b      	ldr	r5, [pc, #44]	@ (8004290 <__libc_init_array+0x40>)
 8004262:	4c0c      	ldr	r4, [pc, #48]	@ (8004294 <__libc_init_array+0x44>)
 8004264:	f000 fe3a 	bl	8004edc <_init>
 8004268:	1b64      	subs	r4, r4, r5
 800426a:	10a4      	asrs	r4, r4, #2
 800426c:	2600      	movs	r6, #0
 800426e:	42a6      	cmp	r6, r4
 8004270:	d105      	bne.n	800427e <__libc_init_array+0x2e>
 8004272:	bd70      	pop	{r4, r5, r6, pc}
 8004274:	f855 3b04 	ldr.w	r3, [r5], #4
 8004278:	4798      	blx	r3
 800427a:	3601      	adds	r6, #1
 800427c:	e7ee      	b.n	800425c <__libc_init_array+0xc>
 800427e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004282:	4798      	blx	r3
 8004284:	3601      	adds	r6, #1
 8004286:	e7f2      	b.n	800426e <__libc_init_array+0x1e>
 8004288:	0800506c 	.word	0x0800506c
 800428c:	0800506c 	.word	0x0800506c
 8004290:	0800506c 	.word	0x0800506c
 8004294:	08005070 	.word	0x08005070

08004298 <__retarget_lock_init_recursive>:
 8004298:	4770      	bx	lr

0800429a <__retarget_lock_acquire_recursive>:
 800429a:	4770      	bx	lr

0800429c <__retarget_lock_release_recursive>:
 800429c:	4770      	bx	lr
	...

080042a0 <__assert_func>:
 80042a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80042a2:	4614      	mov	r4, r2
 80042a4:	461a      	mov	r2, r3
 80042a6:	4b09      	ldr	r3, [pc, #36]	@ (80042cc <__assert_func+0x2c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4605      	mov	r5, r0
 80042ac:	68d8      	ldr	r0, [r3, #12]
 80042ae:	b954      	cbnz	r4, 80042c6 <__assert_func+0x26>
 80042b0:	4b07      	ldr	r3, [pc, #28]	@ (80042d0 <__assert_func+0x30>)
 80042b2:	461c      	mov	r4, r3
 80042b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80042b8:	9100      	str	r1, [sp, #0]
 80042ba:	462b      	mov	r3, r5
 80042bc:	4905      	ldr	r1, [pc, #20]	@ (80042d4 <__assert_func+0x34>)
 80042be:	f000 f9b9 	bl	8004634 <fiprintf>
 80042c2:	f000 f9d9 	bl	8004678 <abort>
 80042c6:	4b04      	ldr	r3, [pc, #16]	@ (80042d8 <__assert_func+0x38>)
 80042c8:	e7f4      	b.n	80042b4 <__assert_func+0x14>
 80042ca:	bf00      	nop
 80042cc:	20000040 	.word	0x20000040
 80042d0:	0800502e 	.word	0x0800502e
 80042d4:	08005000 	.word	0x08005000
 80042d8:	08004ff3 	.word	0x08004ff3

080042dc <_free_r>:
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	4605      	mov	r5, r0
 80042e0:	2900      	cmp	r1, #0
 80042e2:	d041      	beq.n	8004368 <_free_r+0x8c>
 80042e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042e8:	1f0c      	subs	r4, r1, #4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	bfb8      	it	lt
 80042ee:	18e4      	addlt	r4, r4, r3
 80042f0:	f000 f8e8 	bl	80044c4 <__malloc_lock>
 80042f4:	4a1d      	ldr	r2, [pc, #116]	@ (800436c <_free_r+0x90>)
 80042f6:	6813      	ldr	r3, [r2, #0]
 80042f8:	b933      	cbnz	r3, 8004308 <_free_r+0x2c>
 80042fa:	6063      	str	r3, [r4, #4]
 80042fc:	6014      	str	r4, [r2, #0]
 80042fe:	4628      	mov	r0, r5
 8004300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004304:	f000 b8e4 	b.w	80044d0 <__malloc_unlock>
 8004308:	42a3      	cmp	r3, r4
 800430a:	d908      	bls.n	800431e <_free_r+0x42>
 800430c:	6820      	ldr	r0, [r4, #0]
 800430e:	1821      	adds	r1, r4, r0
 8004310:	428b      	cmp	r3, r1
 8004312:	bf01      	itttt	eq
 8004314:	6819      	ldreq	r1, [r3, #0]
 8004316:	685b      	ldreq	r3, [r3, #4]
 8004318:	1809      	addeq	r1, r1, r0
 800431a:	6021      	streq	r1, [r4, #0]
 800431c:	e7ed      	b.n	80042fa <_free_r+0x1e>
 800431e:	461a      	mov	r2, r3
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	b10b      	cbz	r3, 8004328 <_free_r+0x4c>
 8004324:	42a3      	cmp	r3, r4
 8004326:	d9fa      	bls.n	800431e <_free_r+0x42>
 8004328:	6811      	ldr	r1, [r2, #0]
 800432a:	1850      	adds	r0, r2, r1
 800432c:	42a0      	cmp	r0, r4
 800432e:	d10b      	bne.n	8004348 <_free_r+0x6c>
 8004330:	6820      	ldr	r0, [r4, #0]
 8004332:	4401      	add	r1, r0
 8004334:	1850      	adds	r0, r2, r1
 8004336:	4283      	cmp	r3, r0
 8004338:	6011      	str	r1, [r2, #0]
 800433a:	d1e0      	bne.n	80042fe <_free_r+0x22>
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	6053      	str	r3, [r2, #4]
 8004342:	4408      	add	r0, r1
 8004344:	6010      	str	r0, [r2, #0]
 8004346:	e7da      	b.n	80042fe <_free_r+0x22>
 8004348:	d902      	bls.n	8004350 <_free_r+0x74>
 800434a:	230c      	movs	r3, #12
 800434c:	602b      	str	r3, [r5, #0]
 800434e:	e7d6      	b.n	80042fe <_free_r+0x22>
 8004350:	6820      	ldr	r0, [r4, #0]
 8004352:	1821      	adds	r1, r4, r0
 8004354:	428b      	cmp	r3, r1
 8004356:	bf04      	itt	eq
 8004358:	6819      	ldreq	r1, [r3, #0]
 800435a:	685b      	ldreq	r3, [r3, #4]
 800435c:	6063      	str	r3, [r4, #4]
 800435e:	bf04      	itt	eq
 8004360:	1809      	addeq	r1, r1, r0
 8004362:	6021      	streq	r1, [r4, #0]
 8004364:	6054      	str	r4, [r2, #4]
 8004366:	e7ca      	b.n	80042fe <_free_r+0x22>
 8004368:	bd38      	pop	{r3, r4, r5, pc}
 800436a:	bf00      	nop
 800436c:	2000029c 	.word	0x2000029c

08004370 <malloc>:
 8004370:	4b02      	ldr	r3, [pc, #8]	@ (800437c <malloc+0xc>)
 8004372:	4601      	mov	r1, r0
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	f000 b825 	b.w	80043c4 <_malloc_r>
 800437a:	bf00      	nop
 800437c:	20000040 	.word	0x20000040

08004380 <sbrk_aligned>:
 8004380:	b570      	push	{r4, r5, r6, lr}
 8004382:	4e0f      	ldr	r6, [pc, #60]	@ (80043c0 <sbrk_aligned+0x40>)
 8004384:	460c      	mov	r4, r1
 8004386:	6831      	ldr	r1, [r6, #0]
 8004388:	4605      	mov	r5, r0
 800438a:	b911      	cbnz	r1, 8004392 <sbrk_aligned+0x12>
 800438c:	f000 f964 	bl	8004658 <_sbrk_r>
 8004390:	6030      	str	r0, [r6, #0]
 8004392:	4621      	mov	r1, r4
 8004394:	4628      	mov	r0, r5
 8004396:	f000 f95f 	bl	8004658 <_sbrk_r>
 800439a:	1c43      	adds	r3, r0, #1
 800439c:	d103      	bne.n	80043a6 <sbrk_aligned+0x26>
 800439e:	f04f 34ff 	mov.w	r4, #4294967295
 80043a2:	4620      	mov	r0, r4
 80043a4:	bd70      	pop	{r4, r5, r6, pc}
 80043a6:	1cc4      	adds	r4, r0, #3
 80043a8:	f024 0403 	bic.w	r4, r4, #3
 80043ac:	42a0      	cmp	r0, r4
 80043ae:	d0f8      	beq.n	80043a2 <sbrk_aligned+0x22>
 80043b0:	1a21      	subs	r1, r4, r0
 80043b2:	4628      	mov	r0, r5
 80043b4:	f000 f950 	bl	8004658 <_sbrk_r>
 80043b8:	3001      	adds	r0, #1
 80043ba:	d1f2      	bne.n	80043a2 <sbrk_aligned+0x22>
 80043bc:	e7ef      	b.n	800439e <sbrk_aligned+0x1e>
 80043be:	bf00      	nop
 80043c0:	20000298 	.word	0x20000298

080043c4 <_malloc_r>:
 80043c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043c8:	1ccd      	adds	r5, r1, #3
 80043ca:	f025 0503 	bic.w	r5, r5, #3
 80043ce:	3508      	adds	r5, #8
 80043d0:	2d0c      	cmp	r5, #12
 80043d2:	bf38      	it	cc
 80043d4:	250c      	movcc	r5, #12
 80043d6:	2d00      	cmp	r5, #0
 80043d8:	4606      	mov	r6, r0
 80043da:	db01      	blt.n	80043e0 <_malloc_r+0x1c>
 80043dc:	42a9      	cmp	r1, r5
 80043de:	d904      	bls.n	80043ea <_malloc_r+0x26>
 80043e0:	230c      	movs	r3, #12
 80043e2:	6033      	str	r3, [r6, #0]
 80043e4:	2000      	movs	r0, #0
 80043e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044c0 <_malloc_r+0xfc>
 80043ee:	f000 f869 	bl	80044c4 <__malloc_lock>
 80043f2:	f8d8 3000 	ldr.w	r3, [r8]
 80043f6:	461c      	mov	r4, r3
 80043f8:	bb44      	cbnz	r4, 800444c <_malloc_r+0x88>
 80043fa:	4629      	mov	r1, r5
 80043fc:	4630      	mov	r0, r6
 80043fe:	f7ff ffbf 	bl	8004380 <sbrk_aligned>
 8004402:	1c43      	adds	r3, r0, #1
 8004404:	4604      	mov	r4, r0
 8004406:	d158      	bne.n	80044ba <_malloc_r+0xf6>
 8004408:	f8d8 4000 	ldr.w	r4, [r8]
 800440c:	4627      	mov	r7, r4
 800440e:	2f00      	cmp	r7, #0
 8004410:	d143      	bne.n	800449a <_malloc_r+0xd6>
 8004412:	2c00      	cmp	r4, #0
 8004414:	d04b      	beq.n	80044ae <_malloc_r+0xea>
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	4639      	mov	r1, r7
 800441a:	4630      	mov	r0, r6
 800441c:	eb04 0903 	add.w	r9, r4, r3
 8004420:	f000 f91a 	bl	8004658 <_sbrk_r>
 8004424:	4581      	cmp	r9, r0
 8004426:	d142      	bne.n	80044ae <_malloc_r+0xea>
 8004428:	6821      	ldr	r1, [r4, #0]
 800442a:	1a6d      	subs	r5, r5, r1
 800442c:	4629      	mov	r1, r5
 800442e:	4630      	mov	r0, r6
 8004430:	f7ff ffa6 	bl	8004380 <sbrk_aligned>
 8004434:	3001      	adds	r0, #1
 8004436:	d03a      	beq.n	80044ae <_malloc_r+0xea>
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	442b      	add	r3, r5
 800443c:	6023      	str	r3, [r4, #0]
 800443e:	f8d8 3000 	ldr.w	r3, [r8]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	bb62      	cbnz	r2, 80044a0 <_malloc_r+0xdc>
 8004446:	f8c8 7000 	str.w	r7, [r8]
 800444a:	e00f      	b.n	800446c <_malloc_r+0xa8>
 800444c:	6822      	ldr	r2, [r4, #0]
 800444e:	1b52      	subs	r2, r2, r5
 8004450:	d420      	bmi.n	8004494 <_malloc_r+0xd0>
 8004452:	2a0b      	cmp	r2, #11
 8004454:	d917      	bls.n	8004486 <_malloc_r+0xc2>
 8004456:	1961      	adds	r1, r4, r5
 8004458:	42a3      	cmp	r3, r4
 800445a:	6025      	str	r5, [r4, #0]
 800445c:	bf18      	it	ne
 800445e:	6059      	strne	r1, [r3, #4]
 8004460:	6863      	ldr	r3, [r4, #4]
 8004462:	bf08      	it	eq
 8004464:	f8c8 1000 	streq.w	r1, [r8]
 8004468:	5162      	str	r2, [r4, r5]
 800446a:	604b      	str	r3, [r1, #4]
 800446c:	4630      	mov	r0, r6
 800446e:	f000 f82f 	bl	80044d0 <__malloc_unlock>
 8004472:	f104 000b 	add.w	r0, r4, #11
 8004476:	1d23      	adds	r3, r4, #4
 8004478:	f020 0007 	bic.w	r0, r0, #7
 800447c:	1ac2      	subs	r2, r0, r3
 800447e:	bf1c      	itt	ne
 8004480:	1a1b      	subne	r3, r3, r0
 8004482:	50a3      	strne	r3, [r4, r2]
 8004484:	e7af      	b.n	80043e6 <_malloc_r+0x22>
 8004486:	6862      	ldr	r2, [r4, #4]
 8004488:	42a3      	cmp	r3, r4
 800448a:	bf0c      	ite	eq
 800448c:	f8c8 2000 	streq.w	r2, [r8]
 8004490:	605a      	strne	r2, [r3, #4]
 8004492:	e7eb      	b.n	800446c <_malloc_r+0xa8>
 8004494:	4623      	mov	r3, r4
 8004496:	6864      	ldr	r4, [r4, #4]
 8004498:	e7ae      	b.n	80043f8 <_malloc_r+0x34>
 800449a:	463c      	mov	r4, r7
 800449c:	687f      	ldr	r7, [r7, #4]
 800449e:	e7b6      	b.n	800440e <_malloc_r+0x4a>
 80044a0:	461a      	mov	r2, r3
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	42a3      	cmp	r3, r4
 80044a6:	d1fb      	bne.n	80044a0 <_malloc_r+0xdc>
 80044a8:	2300      	movs	r3, #0
 80044aa:	6053      	str	r3, [r2, #4]
 80044ac:	e7de      	b.n	800446c <_malloc_r+0xa8>
 80044ae:	230c      	movs	r3, #12
 80044b0:	6033      	str	r3, [r6, #0]
 80044b2:	4630      	mov	r0, r6
 80044b4:	f000 f80c 	bl	80044d0 <__malloc_unlock>
 80044b8:	e794      	b.n	80043e4 <_malloc_r+0x20>
 80044ba:	6005      	str	r5, [r0, #0]
 80044bc:	e7d6      	b.n	800446c <_malloc_r+0xa8>
 80044be:	bf00      	nop
 80044c0:	2000029c 	.word	0x2000029c

080044c4 <__malloc_lock>:
 80044c4:	4801      	ldr	r0, [pc, #4]	@ (80044cc <__malloc_lock+0x8>)
 80044c6:	f7ff bee8 	b.w	800429a <__retarget_lock_acquire_recursive>
 80044ca:	bf00      	nop
 80044cc:	20000294 	.word	0x20000294

080044d0 <__malloc_unlock>:
 80044d0:	4801      	ldr	r0, [pc, #4]	@ (80044d8 <__malloc_unlock+0x8>)
 80044d2:	f7ff bee3 	b.w	800429c <__retarget_lock_release_recursive>
 80044d6:	bf00      	nop
 80044d8:	20000294 	.word	0x20000294

080044dc <__sflush_r>:
 80044dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e4:	0716      	lsls	r6, r2, #28
 80044e6:	4605      	mov	r5, r0
 80044e8:	460c      	mov	r4, r1
 80044ea:	d454      	bmi.n	8004596 <__sflush_r+0xba>
 80044ec:	684b      	ldr	r3, [r1, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	dc02      	bgt.n	80044f8 <__sflush_r+0x1c>
 80044f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	dd48      	ble.n	800458a <__sflush_r+0xae>
 80044f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044fa:	2e00      	cmp	r6, #0
 80044fc:	d045      	beq.n	800458a <__sflush_r+0xae>
 80044fe:	2300      	movs	r3, #0
 8004500:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004504:	682f      	ldr	r7, [r5, #0]
 8004506:	6a21      	ldr	r1, [r4, #32]
 8004508:	602b      	str	r3, [r5, #0]
 800450a:	d030      	beq.n	800456e <__sflush_r+0x92>
 800450c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800450e:	89a3      	ldrh	r3, [r4, #12]
 8004510:	0759      	lsls	r1, r3, #29
 8004512:	d505      	bpl.n	8004520 <__sflush_r+0x44>
 8004514:	6863      	ldr	r3, [r4, #4]
 8004516:	1ad2      	subs	r2, r2, r3
 8004518:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800451a:	b10b      	cbz	r3, 8004520 <__sflush_r+0x44>
 800451c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800451e:	1ad2      	subs	r2, r2, r3
 8004520:	2300      	movs	r3, #0
 8004522:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004524:	6a21      	ldr	r1, [r4, #32]
 8004526:	4628      	mov	r0, r5
 8004528:	47b0      	blx	r6
 800452a:	1c43      	adds	r3, r0, #1
 800452c:	89a3      	ldrh	r3, [r4, #12]
 800452e:	d106      	bne.n	800453e <__sflush_r+0x62>
 8004530:	6829      	ldr	r1, [r5, #0]
 8004532:	291d      	cmp	r1, #29
 8004534:	d82b      	bhi.n	800458e <__sflush_r+0xb2>
 8004536:	4a2a      	ldr	r2, [pc, #168]	@ (80045e0 <__sflush_r+0x104>)
 8004538:	410a      	asrs	r2, r1
 800453a:	07d6      	lsls	r6, r2, #31
 800453c:	d427      	bmi.n	800458e <__sflush_r+0xb2>
 800453e:	2200      	movs	r2, #0
 8004540:	6062      	str	r2, [r4, #4]
 8004542:	04d9      	lsls	r1, r3, #19
 8004544:	6922      	ldr	r2, [r4, #16]
 8004546:	6022      	str	r2, [r4, #0]
 8004548:	d504      	bpl.n	8004554 <__sflush_r+0x78>
 800454a:	1c42      	adds	r2, r0, #1
 800454c:	d101      	bne.n	8004552 <__sflush_r+0x76>
 800454e:	682b      	ldr	r3, [r5, #0]
 8004550:	b903      	cbnz	r3, 8004554 <__sflush_r+0x78>
 8004552:	6560      	str	r0, [r4, #84]	@ 0x54
 8004554:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004556:	602f      	str	r7, [r5, #0]
 8004558:	b1b9      	cbz	r1, 800458a <__sflush_r+0xae>
 800455a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800455e:	4299      	cmp	r1, r3
 8004560:	d002      	beq.n	8004568 <__sflush_r+0x8c>
 8004562:	4628      	mov	r0, r5
 8004564:	f7ff feba 	bl	80042dc <_free_r>
 8004568:	2300      	movs	r3, #0
 800456a:	6363      	str	r3, [r4, #52]	@ 0x34
 800456c:	e00d      	b.n	800458a <__sflush_r+0xae>
 800456e:	2301      	movs	r3, #1
 8004570:	4628      	mov	r0, r5
 8004572:	47b0      	blx	r6
 8004574:	4602      	mov	r2, r0
 8004576:	1c50      	adds	r0, r2, #1
 8004578:	d1c9      	bne.n	800450e <__sflush_r+0x32>
 800457a:	682b      	ldr	r3, [r5, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0c6      	beq.n	800450e <__sflush_r+0x32>
 8004580:	2b1d      	cmp	r3, #29
 8004582:	d001      	beq.n	8004588 <__sflush_r+0xac>
 8004584:	2b16      	cmp	r3, #22
 8004586:	d11e      	bne.n	80045c6 <__sflush_r+0xea>
 8004588:	602f      	str	r7, [r5, #0]
 800458a:	2000      	movs	r0, #0
 800458c:	e022      	b.n	80045d4 <__sflush_r+0xf8>
 800458e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004592:	b21b      	sxth	r3, r3
 8004594:	e01b      	b.n	80045ce <__sflush_r+0xf2>
 8004596:	690f      	ldr	r7, [r1, #16]
 8004598:	2f00      	cmp	r7, #0
 800459a:	d0f6      	beq.n	800458a <__sflush_r+0xae>
 800459c:	0793      	lsls	r3, r2, #30
 800459e:	680e      	ldr	r6, [r1, #0]
 80045a0:	bf08      	it	eq
 80045a2:	694b      	ldreq	r3, [r1, #20]
 80045a4:	600f      	str	r7, [r1, #0]
 80045a6:	bf18      	it	ne
 80045a8:	2300      	movne	r3, #0
 80045aa:	eba6 0807 	sub.w	r8, r6, r7
 80045ae:	608b      	str	r3, [r1, #8]
 80045b0:	f1b8 0f00 	cmp.w	r8, #0
 80045b4:	dde9      	ble.n	800458a <__sflush_r+0xae>
 80045b6:	6a21      	ldr	r1, [r4, #32]
 80045b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80045ba:	4643      	mov	r3, r8
 80045bc:	463a      	mov	r2, r7
 80045be:	4628      	mov	r0, r5
 80045c0:	47b0      	blx	r6
 80045c2:	2800      	cmp	r0, #0
 80045c4:	dc08      	bgt.n	80045d8 <__sflush_r+0xfc>
 80045c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045ce:	81a3      	strh	r3, [r4, #12]
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045d8:	4407      	add	r7, r0
 80045da:	eba8 0800 	sub.w	r8, r8, r0
 80045de:	e7e7      	b.n	80045b0 <__sflush_r+0xd4>
 80045e0:	dfbffffe 	.word	0xdfbffffe

080045e4 <_fflush_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	690b      	ldr	r3, [r1, #16]
 80045e8:	4605      	mov	r5, r0
 80045ea:	460c      	mov	r4, r1
 80045ec:	b913      	cbnz	r3, 80045f4 <_fflush_r+0x10>
 80045ee:	2500      	movs	r5, #0
 80045f0:	4628      	mov	r0, r5
 80045f2:	bd38      	pop	{r3, r4, r5, pc}
 80045f4:	b118      	cbz	r0, 80045fe <_fflush_r+0x1a>
 80045f6:	6a03      	ldr	r3, [r0, #32]
 80045f8:	b90b      	cbnz	r3, 80045fe <_fflush_r+0x1a>
 80045fa:	f7ff fd5b 	bl	80040b4 <__sinit>
 80045fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f3      	beq.n	80045ee <_fflush_r+0xa>
 8004606:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004608:	07d0      	lsls	r0, r2, #31
 800460a:	d404      	bmi.n	8004616 <_fflush_r+0x32>
 800460c:	0599      	lsls	r1, r3, #22
 800460e:	d402      	bmi.n	8004616 <_fflush_r+0x32>
 8004610:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004612:	f7ff fe42 	bl	800429a <__retarget_lock_acquire_recursive>
 8004616:	4628      	mov	r0, r5
 8004618:	4621      	mov	r1, r4
 800461a:	f7ff ff5f 	bl	80044dc <__sflush_r>
 800461e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004620:	07da      	lsls	r2, r3, #31
 8004622:	4605      	mov	r5, r0
 8004624:	d4e4      	bmi.n	80045f0 <_fflush_r+0xc>
 8004626:	89a3      	ldrh	r3, [r4, #12]
 8004628:	059b      	lsls	r3, r3, #22
 800462a:	d4e1      	bmi.n	80045f0 <_fflush_r+0xc>
 800462c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800462e:	f7ff fe35 	bl	800429c <__retarget_lock_release_recursive>
 8004632:	e7dd      	b.n	80045f0 <_fflush_r+0xc>

08004634 <fiprintf>:
 8004634:	b40e      	push	{r1, r2, r3}
 8004636:	b503      	push	{r0, r1, lr}
 8004638:	4601      	mov	r1, r0
 800463a:	ab03      	add	r3, sp, #12
 800463c:	4805      	ldr	r0, [pc, #20]	@ (8004654 <fiprintf+0x20>)
 800463e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004642:	6800      	ldr	r0, [r0, #0]
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	f000 f847 	bl	80046d8 <_vfiprintf_r>
 800464a:	b002      	add	sp, #8
 800464c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004650:	b003      	add	sp, #12
 8004652:	4770      	bx	lr
 8004654:	20000040 	.word	0x20000040

08004658 <_sbrk_r>:
 8004658:	b538      	push	{r3, r4, r5, lr}
 800465a:	4d06      	ldr	r5, [pc, #24]	@ (8004674 <_sbrk_r+0x1c>)
 800465c:	2300      	movs	r3, #0
 800465e:	4604      	mov	r4, r0
 8004660:	4608      	mov	r0, r1
 8004662:	602b      	str	r3, [r5, #0]
 8004664:	f7fd fb06 	bl	8001c74 <_sbrk>
 8004668:	1c43      	adds	r3, r0, #1
 800466a:	d102      	bne.n	8004672 <_sbrk_r+0x1a>
 800466c:	682b      	ldr	r3, [r5, #0]
 800466e:	b103      	cbz	r3, 8004672 <_sbrk_r+0x1a>
 8004670:	6023      	str	r3, [r4, #0]
 8004672:	bd38      	pop	{r3, r4, r5, pc}
 8004674:	20000290 	.word	0x20000290

08004678 <abort>:
 8004678:	b508      	push	{r3, lr}
 800467a:	2006      	movs	r0, #6
 800467c:	f000 fb8e 	bl	8004d9c <raise>
 8004680:	2001      	movs	r0, #1
 8004682:	f7fd fa7e 	bl	8001b82 <_exit>

08004686 <__sfputc_r>:
 8004686:	6893      	ldr	r3, [r2, #8]
 8004688:	3b01      	subs	r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	b410      	push	{r4}
 800468e:	6093      	str	r3, [r2, #8]
 8004690:	da08      	bge.n	80046a4 <__sfputc_r+0x1e>
 8004692:	6994      	ldr	r4, [r2, #24]
 8004694:	42a3      	cmp	r3, r4
 8004696:	db01      	blt.n	800469c <__sfputc_r+0x16>
 8004698:	290a      	cmp	r1, #10
 800469a:	d103      	bne.n	80046a4 <__sfputc_r+0x1e>
 800469c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046a0:	f000 bac0 	b.w	8004c24 <__swbuf_r>
 80046a4:	6813      	ldr	r3, [r2, #0]
 80046a6:	1c58      	adds	r0, r3, #1
 80046a8:	6010      	str	r0, [r2, #0]
 80046aa:	7019      	strb	r1, [r3, #0]
 80046ac:	4608      	mov	r0, r1
 80046ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <__sfputs_r>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	4606      	mov	r6, r0
 80046b8:	460f      	mov	r7, r1
 80046ba:	4614      	mov	r4, r2
 80046bc:	18d5      	adds	r5, r2, r3
 80046be:	42ac      	cmp	r4, r5
 80046c0:	d101      	bne.n	80046c6 <__sfputs_r+0x12>
 80046c2:	2000      	movs	r0, #0
 80046c4:	e007      	b.n	80046d6 <__sfputs_r+0x22>
 80046c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ca:	463a      	mov	r2, r7
 80046cc:	4630      	mov	r0, r6
 80046ce:	f7ff ffda 	bl	8004686 <__sfputc_r>
 80046d2:	1c43      	adds	r3, r0, #1
 80046d4:	d1f3      	bne.n	80046be <__sfputs_r+0xa>
 80046d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080046d8 <_vfiprintf_r>:
 80046d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046dc:	460d      	mov	r5, r1
 80046de:	b09d      	sub	sp, #116	@ 0x74
 80046e0:	4614      	mov	r4, r2
 80046e2:	4698      	mov	r8, r3
 80046e4:	4606      	mov	r6, r0
 80046e6:	b118      	cbz	r0, 80046f0 <_vfiprintf_r+0x18>
 80046e8:	6a03      	ldr	r3, [r0, #32]
 80046ea:	b90b      	cbnz	r3, 80046f0 <_vfiprintf_r+0x18>
 80046ec:	f7ff fce2 	bl	80040b4 <__sinit>
 80046f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046f2:	07d9      	lsls	r1, r3, #31
 80046f4:	d405      	bmi.n	8004702 <_vfiprintf_r+0x2a>
 80046f6:	89ab      	ldrh	r3, [r5, #12]
 80046f8:	059a      	lsls	r2, r3, #22
 80046fa:	d402      	bmi.n	8004702 <_vfiprintf_r+0x2a>
 80046fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046fe:	f7ff fdcc 	bl	800429a <__retarget_lock_acquire_recursive>
 8004702:	89ab      	ldrh	r3, [r5, #12]
 8004704:	071b      	lsls	r3, r3, #28
 8004706:	d501      	bpl.n	800470c <_vfiprintf_r+0x34>
 8004708:	692b      	ldr	r3, [r5, #16]
 800470a:	b99b      	cbnz	r3, 8004734 <_vfiprintf_r+0x5c>
 800470c:	4629      	mov	r1, r5
 800470e:	4630      	mov	r0, r6
 8004710:	f000 fac6 	bl	8004ca0 <__swsetup_r>
 8004714:	b170      	cbz	r0, 8004734 <_vfiprintf_r+0x5c>
 8004716:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004718:	07dc      	lsls	r4, r3, #31
 800471a:	d504      	bpl.n	8004726 <_vfiprintf_r+0x4e>
 800471c:	f04f 30ff 	mov.w	r0, #4294967295
 8004720:	b01d      	add	sp, #116	@ 0x74
 8004722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004726:	89ab      	ldrh	r3, [r5, #12]
 8004728:	0598      	lsls	r0, r3, #22
 800472a:	d4f7      	bmi.n	800471c <_vfiprintf_r+0x44>
 800472c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800472e:	f7ff fdb5 	bl	800429c <__retarget_lock_release_recursive>
 8004732:	e7f3      	b.n	800471c <_vfiprintf_r+0x44>
 8004734:	2300      	movs	r3, #0
 8004736:	9309      	str	r3, [sp, #36]	@ 0x24
 8004738:	2320      	movs	r3, #32
 800473a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800473e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004742:	2330      	movs	r3, #48	@ 0x30
 8004744:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80048f4 <_vfiprintf_r+0x21c>
 8004748:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800474c:	f04f 0901 	mov.w	r9, #1
 8004750:	4623      	mov	r3, r4
 8004752:	469a      	mov	sl, r3
 8004754:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004758:	b10a      	cbz	r2, 800475e <_vfiprintf_r+0x86>
 800475a:	2a25      	cmp	r2, #37	@ 0x25
 800475c:	d1f9      	bne.n	8004752 <_vfiprintf_r+0x7a>
 800475e:	ebba 0b04 	subs.w	fp, sl, r4
 8004762:	d00b      	beq.n	800477c <_vfiprintf_r+0xa4>
 8004764:	465b      	mov	r3, fp
 8004766:	4622      	mov	r2, r4
 8004768:	4629      	mov	r1, r5
 800476a:	4630      	mov	r0, r6
 800476c:	f7ff ffa2 	bl	80046b4 <__sfputs_r>
 8004770:	3001      	adds	r0, #1
 8004772:	f000 80a7 	beq.w	80048c4 <_vfiprintf_r+0x1ec>
 8004776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004778:	445a      	add	r2, fp
 800477a:	9209      	str	r2, [sp, #36]	@ 0x24
 800477c:	f89a 3000 	ldrb.w	r3, [sl]
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 809f 	beq.w	80048c4 <_vfiprintf_r+0x1ec>
 8004786:	2300      	movs	r3, #0
 8004788:	f04f 32ff 	mov.w	r2, #4294967295
 800478c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004790:	f10a 0a01 	add.w	sl, sl, #1
 8004794:	9304      	str	r3, [sp, #16]
 8004796:	9307      	str	r3, [sp, #28]
 8004798:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800479c:	931a      	str	r3, [sp, #104]	@ 0x68
 800479e:	4654      	mov	r4, sl
 80047a0:	2205      	movs	r2, #5
 80047a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047a6:	4853      	ldr	r0, [pc, #332]	@ (80048f4 <_vfiprintf_r+0x21c>)
 80047a8:	f7fb fd22 	bl	80001f0 <memchr>
 80047ac:	9a04      	ldr	r2, [sp, #16]
 80047ae:	b9d8      	cbnz	r0, 80047e8 <_vfiprintf_r+0x110>
 80047b0:	06d1      	lsls	r1, r2, #27
 80047b2:	bf44      	itt	mi
 80047b4:	2320      	movmi	r3, #32
 80047b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80047ba:	0713      	lsls	r3, r2, #28
 80047bc:	bf44      	itt	mi
 80047be:	232b      	movmi	r3, #43	@ 0x2b
 80047c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80047c4:	f89a 3000 	ldrb.w	r3, [sl]
 80047c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80047ca:	d015      	beq.n	80047f8 <_vfiprintf_r+0x120>
 80047cc:	9a07      	ldr	r2, [sp, #28]
 80047ce:	4654      	mov	r4, sl
 80047d0:	2000      	movs	r0, #0
 80047d2:	f04f 0c0a 	mov.w	ip, #10
 80047d6:	4621      	mov	r1, r4
 80047d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047dc:	3b30      	subs	r3, #48	@ 0x30
 80047de:	2b09      	cmp	r3, #9
 80047e0:	d94b      	bls.n	800487a <_vfiprintf_r+0x1a2>
 80047e2:	b1b0      	cbz	r0, 8004812 <_vfiprintf_r+0x13a>
 80047e4:	9207      	str	r2, [sp, #28]
 80047e6:	e014      	b.n	8004812 <_vfiprintf_r+0x13a>
 80047e8:	eba0 0308 	sub.w	r3, r0, r8
 80047ec:	fa09 f303 	lsl.w	r3, r9, r3
 80047f0:	4313      	orrs	r3, r2
 80047f2:	9304      	str	r3, [sp, #16]
 80047f4:	46a2      	mov	sl, r4
 80047f6:	e7d2      	b.n	800479e <_vfiprintf_r+0xc6>
 80047f8:	9b03      	ldr	r3, [sp, #12]
 80047fa:	1d19      	adds	r1, r3, #4
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	9103      	str	r1, [sp, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	bfbb      	ittet	lt
 8004804:	425b      	neglt	r3, r3
 8004806:	f042 0202 	orrlt.w	r2, r2, #2
 800480a:	9307      	strge	r3, [sp, #28]
 800480c:	9307      	strlt	r3, [sp, #28]
 800480e:	bfb8      	it	lt
 8004810:	9204      	strlt	r2, [sp, #16]
 8004812:	7823      	ldrb	r3, [r4, #0]
 8004814:	2b2e      	cmp	r3, #46	@ 0x2e
 8004816:	d10a      	bne.n	800482e <_vfiprintf_r+0x156>
 8004818:	7863      	ldrb	r3, [r4, #1]
 800481a:	2b2a      	cmp	r3, #42	@ 0x2a
 800481c:	d132      	bne.n	8004884 <_vfiprintf_r+0x1ac>
 800481e:	9b03      	ldr	r3, [sp, #12]
 8004820:	1d1a      	adds	r2, r3, #4
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	9203      	str	r2, [sp, #12]
 8004826:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800482a:	3402      	adds	r4, #2
 800482c:	9305      	str	r3, [sp, #20]
 800482e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004904 <_vfiprintf_r+0x22c>
 8004832:	7821      	ldrb	r1, [r4, #0]
 8004834:	2203      	movs	r2, #3
 8004836:	4650      	mov	r0, sl
 8004838:	f7fb fcda 	bl	80001f0 <memchr>
 800483c:	b138      	cbz	r0, 800484e <_vfiprintf_r+0x176>
 800483e:	9b04      	ldr	r3, [sp, #16]
 8004840:	eba0 000a 	sub.w	r0, r0, sl
 8004844:	2240      	movs	r2, #64	@ 0x40
 8004846:	4082      	lsls	r2, r0
 8004848:	4313      	orrs	r3, r2
 800484a:	3401      	adds	r4, #1
 800484c:	9304      	str	r3, [sp, #16]
 800484e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004852:	4829      	ldr	r0, [pc, #164]	@ (80048f8 <_vfiprintf_r+0x220>)
 8004854:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004858:	2206      	movs	r2, #6
 800485a:	f7fb fcc9 	bl	80001f0 <memchr>
 800485e:	2800      	cmp	r0, #0
 8004860:	d03f      	beq.n	80048e2 <_vfiprintf_r+0x20a>
 8004862:	4b26      	ldr	r3, [pc, #152]	@ (80048fc <_vfiprintf_r+0x224>)
 8004864:	bb1b      	cbnz	r3, 80048ae <_vfiprintf_r+0x1d6>
 8004866:	9b03      	ldr	r3, [sp, #12]
 8004868:	3307      	adds	r3, #7
 800486a:	f023 0307 	bic.w	r3, r3, #7
 800486e:	3308      	adds	r3, #8
 8004870:	9303      	str	r3, [sp, #12]
 8004872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004874:	443b      	add	r3, r7
 8004876:	9309      	str	r3, [sp, #36]	@ 0x24
 8004878:	e76a      	b.n	8004750 <_vfiprintf_r+0x78>
 800487a:	fb0c 3202 	mla	r2, ip, r2, r3
 800487e:	460c      	mov	r4, r1
 8004880:	2001      	movs	r0, #1
 8004882:	e7a8      	b.n	80047d6 <_vfiprintf_r+0xfe>
 8004884:	2300      	movs	r3, #0
 8004886:	3401      	adds	r4, #1
 8004888:	9305      	str	r3, [sp, #20]
 800488a:	4619      	mov	r1, r3
 800488c:	f04f 0c0a 	mov.w	ip, #10
 8004890:	4620      	mov	r0, r4
 8004892:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004896:	3a30      	subs	r2, #48	@ 0x30
 8004898:	2a09      	cmp	r2, #9
 800489a:	d903      	bls.n	80048a4 <_vfiprintf_r+0x1cc>
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0c6      	beq.n	800482e <_vfiprintf_r+0x156>
 80048a0:	9105      	str	r1, [sp, #20]
 80048a2:	e7c4      	b.n	800482e <_vfiprintf_r+0x156>
 80048a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80048a8:	4604      	mov	r4, r0
 80048aa:	2301      	movs	r3, #1
 80048ac:	e7f0      	b.n	8004890 <_vfiprintf_r+0x1b8>
 80048ae:	ab03      	add	r3, sp, #12
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	462a      	mov	r2, r5
 80048b4:	4b12      	ldr	r3, [pc, #72]	@ (8004900 <_vfiprintf_r+0x228>)
 80048b6:	a904      	add	r1, sp, #16
 80048b8:	4630      	mov	r0, r6
 80048ba:	f3af 8000 	nop.w
 80048be:	4607      	mov	r7, r0
 80048c0:	1c78      	adds	r0, r7, #1
 80048c2:	d1d6      	bne.n	8004872 <_vfiprintf_r+0x19a>
 80048c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048c6:	07d9      	lsls	r1, r3, #31
 80048c8:	d405      	bmi.n	80048d6 <_vfiprintf_r+0x1fe>
 80048ca:	89ab      	ldrh	r3, [r5, #12]
 80048cc:	059a      	lsls	r2, r3, #22
 80048ce:	d402      	bmi.n	80048d6 <_vfiprintf_r+0x1fe>
 80048d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048d2:	f7ff fce3 	bl	800429c <__retarget_lock_release_recursive>
 80048d6:	89ab      	ldrh	r3, [r5, #12]
 80048d8:	065b      	lsls	r3, r3, #25
 80048da:	f53f af1f 	bmi.w	800471c <_vfiprintf_r+0x44>
 80048de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80048e0:	e71e      	b.n	8004720 <_vfiprintf_r+0x48>
 80048e2:	ab03      	add	r3, sp, #12
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	462a      	mov	r2, r5
 80048e8:	4b05      	ldr	r3, [pc, #20]	@ (8004900 <_vfiprintf_r+0x228>)
 80048ea:	a904      	add	r1, sp, #16
 80048ec:	4630      	mov	r0, r6
 80048ee:	f000 f879 	bl	80049e4 <_printf_i>
 80048f2:	e7e4      	b.n	80048be <_vfiprintf_r+0x1e6>
 80048f4:	0800502f 	.word	0x0800502f
 80048f8:	08005039 	.word	0x08005039
 80048fc:	00000000 	.word	0x00000000
 8004900:	080046b5 	.word	0x080046b5
 8004904:	08005035 	.word	0x08005035

08004908 <_printf_common>:
 8004908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800490c:	4616      	mov	r6, r2
 800490e:	4698      	mov	r8, r3
 8004910:	688a      	ldr	r2, [r1, #8]
 8004912:	690b      	ldr	r3, [r1, #16]
 8004914:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004918:	4293      	cmp	r3, r2
 800491a:	bfb8      	it	lt
 800491c:	4613      	movlt	r3, r2
 800491e:	6033      	str	r3, [r6, #0]
 8004920:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004924:	4607      	mov	r7, r0
 8004926:	460c      	mov	r4, r1
 8004928:	b10a      	cbz	r2, 800492e <_printf_common+0x26>
 800492a:	3301      	adds	r3, #1
 800492c:	6033      	str	r3, [r6, #0]
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	0699      	lsls	r1, r3, #26
 8004932:	bf42      	ittt	mi
 8004934:	6833      	ldrmi	r3, [r6, #0]
 8004936:	3302      	addmi	r3, #2
 8004938:	6033      	strmi	r3, [r6, #0]
 800493a:	6825      	ldr	r5, [r4, #0]
 800493c:	f015 0506 	ands.w	r5, r5, #6
 8004940:	d106      	bne.n	8004950 <_printf_common+0x48>
 8004942:	f104 0a19 	add.w	sl, r4, #25
 8004946:	68e3      	ldr	r3, [r4, #12]
 8004948:	6832      	ldr	r2, [r6, #0]
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	42ab      	cmp	r3, r5
 800494e:	dc26      	bgt.n	800499e <_printf_common+0x96>
 8004950:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004954:	6822      	ldr	r2, [r4, #0]
 8004956:	3b00      	subs	r3, #0
 8004958:	bf18      	it	ne
 800495a:	2301      	movne	r3, #1
 800495c:	0692      	lsls	r2, r2, #26
 800495e:	d42b      	bmi.n	80049b8 <_printf_common+0xb0>
 8004960:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004964:	4641      	mov	r1, r8
 8004966:	4638      	mov	r0, r7
 8004968:	47c8      	blx	r9
 800496a:	3001      	adds	r0, #1
 800496c:	d01e      	beq.n	80049ac <_printf_common+0xa4>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	6922      	ldr	r2, [r4, #16]
 8004972:	f003 0306 	and.w	r3, r3, #6
 8004976:	2b04      	cmp	r3, #4
 8004978:	bf02      	ittt	eq
 800497a:	68e5      	ldreq	r5, [r4, #12]
 800497c:	6833      	ldreq	r3, [r6, #0]
 800497e:	1aed      	subeq	r5, r5, r3
 8004980:	68a3      	ldr	r3, [r4, #8]
 8004982:	bf0c      	ite	eq
 8004984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004988:	2500      	movne	r5, #0
 800498a:	4293      	cmp	r3, r2
 800498c:	bfc4      	itt	gt
 800498e:	1a9b      	subgt	r3, r3, r2
 8004990:	18ed      	addgt	r5, r5, r3
 8004992:	2600      	movs	r6, #0
 8004994:	341a      	adds	r4, #26
 8004996:	42b5      	cmp	r5, r6
 8004998:	d11a      	bne.n	80049d0 <_printf_common+0xc8>
 800499a:	2000      	movs	r0, #0
 800499c:	e008      	b.n	80049b0 <_printf_common+0xa8>
 800499e:	2301      	movs	r3, #1
 80049a0:	4652      	mov	r2, sl
 80049a2:	4641      	mov	r1, r8
 80049a4:	4638      	mov	r0, r7
 80049a6:	47c8      	blx	r9
 80049a8:	3001      	adds	r0, #1
 80049aa:	d103      	bne.n	80049b4 <_printf_common+0xac>
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b4:	3501      	adds	r5, #1
 80049b6:	e7c6      	b.n	8004946 <_printf_common+0x3e>
 80049b8:	18e1      	adds	r1, r4, r3
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	2030      	movs	r0, #48	@ 0x30
 80049be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80049c2:	4422      	add	r2, r4
 80049c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80049c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80049cc:	3302      	adds	r3, #2
 80049ce:	e7c7      	b.n	8004960 <_printf_common+0x58>
 80049d0:	2301      	movs	r3, #1
 80049d2:	4622      	mov	r2, r4
 80049d4:	4641      	mov	r1, r8
 80049d6:	4638      	mov	r0, r7
 80049d8:	47c8      	blx	r9
 80049da:	3001      	adds	r0, #1
 80049dc:	d0e6      	beq.n	80049ac <_printf_common+0xa4>
 80049de:	3601      	adds	r6, #1
 80049e0:	e7d9      	b.n	8004996 <_printf_common+0x8e>
	...

080049e4 <_printf_i>:
 80049e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049e8:	7e0f      	ldrb	r7, [r1, #24]
 80049ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049ec:	2f78      	cmp	r7, #120	@ 0x78
 80049ee:	4691      	mov	r9, r2
 80049f0:	4680      	mov	r8, r0
 80049f2:	460c      	mov	r4, r1
 80049f4:	469a      	mov	sl, r3
 80049f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049fa:	d807      	bhi.n	8004a0c <_printf_i+0x28>
 80049fc:	2f62      	cmp	r7, #98	@ 0x62
 80049fe:	d80a      	bhi.n	8004a16 <_printf_i+0x32>
 8004a00:	2f00      	cmp	r7, #0
 8004a02:	f000 80d2 	beq.w	8004baa <_printf_i+0x1c6>
 8004a06:	2f58      	cmp	r7, #88	@ 0x58
 8004a08:	f000 80b9 	beq.w	8004b7e <_printf_i+0x19a>
 8004a0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a14:	e03a      	b.n	8004a8c <_printf_i+0xa8>
 8004a16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a1a:	2b15      	cmp	r3, #21
 8004a1c:	d8f6      	bhi.n	8004a0c <_printf_i+0x28>
 8004a1e:	a101      	add	r1, pc, #4	@ (adr r1, 8004a24 <_printf_i+0x40>)
 8004a20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a24:	08004a7d 	.word	0x08004a7d
 8004a28:	08004a91 	.word	0x08004a91
 8004a2c:	08004a0d 	.word	0x08004a0d
 8004a30:	08004a0d 	.word	0x08004a0d
 8004a34:	08004a0d 	.word	0x08004a0d
 8004a38:	08004a0d 	.word	0x08004a0d
 8004a3c:	08004a91 	.word	0x08004a91
 8004a40:	08004a0d 	.word	0x08004a0d
 8004a44:	08004a0d 	.word	0x08004a0d
 8004a48:	08004a0d 	.word	0x08004a0d
 8004a4c:	08004a0d 	.word	0x08004a0d
 8004a50:	08004b91 	.word	0x08004b91
 8004a54:	08004abb 	.word	0x08004abb
 8004a58:	08004b4b 	.word	0x08004b4b
 8004a5c:	08004a0d 	.word	0x08004a0d
 8004a60:	08004a0d 	.word	0x08004a0d
 8004a64:	08004bb3 	.word	0x08004bb3
 8004a68:	08004a0d 	.word	0x08004a0d
 8004a6c:	08004abb 	.word	0x08004abb
 8004a70:	08004a0d 	.word	0x08004a0d
 8004a74:	08004a0d 	.word	0x08004a0d
 8004a78:	08004b53 	.word	0x08004b53
 8004a7c:	6833      	ldr	r3, [r6, #0]
 8004a7e:	1d1a      	adds	r2, r3, #4
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6032      	str	r2, [r6, #0]
 8004a84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e09d      	b.n	8004bcc <_printf_i+0x1e8>
 8004a90:	6833      	ldr	r3, [r6, #0]
 8004a92:	6820      	ldr	r0, [r4, #0]
 8004a94:	1d19      	adds	r1, r3, #4
 8004a96:	6031      	str	r1, [r6, #0]
 8004a98:	0606      	lsls	r6, r0, #24
 8004a9a:	d501      	bpl.n	8004aa0 <_printf_i+0xbc>
 8004a9c:	681d      	ldr	r5, [r3, #0]
 8004a9e:	e003      	b.n	8004aa8 <_printf_i+0xc4>
 8004aa0:	0645      	lsls	r5, r0, #25
 8004aa2:	d5fb      	bpl.n	8004a9c <_printf_i+0xb8>
 8004aa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004aa8:	2d00      	cmp	r5, #0
 8004aaa:	da03      	bge.n	8004ab4 <_printf_i+0xd0>
 8004aac:	232d      	movs	r3, #45	@ 0x2d
 8004aae:	426d      	negs	r5, r5
 8004ab0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ab4:	4859      	ldr	r0, [pc, #356]	@ (8004c1c <_printf_i+0x238>)
 8004ab6:	230a      	movs	r3, #10
 8004ab8:	e011      	b.n	8004ade <_printf_i+0xfa>
 8004aba:	6821      	ldr	r1, [r4, #0]
 8004abc:	6833      	ldr	r3, [r6, #0]
 8004abe:	0608      	lsls	r0, r1, #24
 8004ac0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ac4:	d402      	bmi.n	8004acc <_printf_i+0xe8>
 8004ac6:	0649      	lsls	r1, r1, #25
 8004ac8:	bf48      	it	mi
 8004aca:	b2ad      	uxthmi	r5, r5
 8004acc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ace:	4853      	ldr	r0, [pc, #332]	@ (8004c1c <_printf_i+0x238>)
 8004ad0:	6033      	str	r3, [r6, #0]
 8004ad2:	bf14      	ite	ne
 8004ad4:	230a      	movne	r3, #10
 8004ad6:	2308      	moveq	r3, #8
 8004ad8:	2100      	movs	r1, #0
 8004ada:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ade:	6866      	ldr	r6, [r4, #4]
 8004ae0:	60a6      	str	r6, [r4, #8]
 8004ae2:	2e00      	cmp	r6, #0
 8004ae4:	bfa2      	ittt	ge
 8004ae6:	6821      	ldrge	r1, [r4, #0]
 8004ae8:	f021 0104 	bicge.w	r1, r1, #4
 8004aec:	6021      	strge	r1, [r4, #0]
 8004aee:	b90d      	cbnz	r5, 8004af4 <_printf_i+0x110>
 8004af0:	2e00      	cmp	r6, #0
 8004af2:	d04b      	beq.n	8004b8c <_printf_i+0x1a8>
 8004af4:	4616      	mov	r6, r2
 8004af6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004afa:	fb03 5711 	mls	r7, r3, r1, r5
 8004afe:	5dc7      	ldrb	r7, [r0, r7]
 8004b00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b04:	462f      	mov	r7, r5
 8004b06:	42bb      	cmp	r3, r7
 8004b08:	460d      	mov	r5, r1
 8004b0a:	d9f4      	bls.n	8004af6 <_printf_i+0x112>
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d10b      	bne.n	8004b28 <_printf_i+0x144>
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	07df      	lsls	r7, r3, #31
 8004b14:	d508      	bpl.n	8004b28 <_printf_i+0x144>
 8004b16:	6923      	ldr	r3, [r4, #16]
 8004b18:	6861      	ldr	r1, [r4, #4]
 8004b1a:	4299      	cmp	r1, r3
 8004b1c:	bfde      	ittt	le
 8004b1e:	2330      	movle	r3, #48	@ 0x30
 8004b20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b28:	1b92      	subs	r2, r2, r6
 8004b2a:	6122      	str	r2, [r4, #16]
 8004b2c:	f8cd a000 	str.w	sl, [sp]
 8004b30:	464b      	mov	r3, r9
 8004b32:	aa03      	add	r2, sp, #12
 8004b34:	4621      	mov	r1, r4
 8004b36:	4640      	mov	r0, r8
 8004b38:	f7ff fee6 	bl	8004908 <_printf_common>
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d14a      	bne.n	8004bd6 <_printf_i+0x1f2>
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295
 8004b44:	b004      	add	sp, #16
 8004b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	f043 0320 	orr.w	r3, r3, #32
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	4833      	ldr	r0, [pc, #204]	@ (8004c20 <_printf_i+0x23c>)
 8004b54:	2778      	movs	r7, #120	@ 0x78
 8004b56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	6831      	ldr	r1, [r6, #0]
 8004b5e:	061f      	lsls	r7, r3, #24
 8004b60:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b64:	d402      	bmi.n	8004b6c <_printf_i+0x188>
 8004b66:	065f      	lsls	r7, r3, #25
 8004b68:	bf48      	it	mi
 8004b6a:	b2ad      	uxthmi	r5, r5
 8004b6c:	6031      	str	r1, [r6, #0]
 8004b6e:	07d9      	lsls	r1, r3, #31
 8004b70:	bf44      	itt	mi
 8004b72:	f043 0320 	orrmi.w	r3, r3, #32
 8004b76:	6023      	strmi	r3, [r4, #0]
 8004b78:	b11d      	cbz	r5, 8004b82 <_printf_i+0x19e>
 8004b7a:	2310      	movs	r3, #16
 8004b7c:	e7ac      	b.n	8004ad8 <_printf_i+0xf4>
 8004b7e:	4827      	ldr	r0, [pc, #156]	@ (8004c1c <_printf_i+0x238>)
 8004b80:	e7e9      	b.n	8004b56 <_printf_i+0x172>
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	f023 0320 	bic.w	r3, r3, #32
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	e7f6      	b.n	8004b7a <_printf_i+0x196>
 8004b8c:	4616      	mov	r6, r2
 8004b8e:	e7bd      	b.n	8004b0c <_printf_i+0x128>
 8004b90:	6833      	ldr	r3, [r6, #0]
 8004b92:	6825      	ldr	r5, [r4, #0]
 8004b94:	6961      	ldr	r1, [r4, #20]
 8004b96:	1d18      	adds	r0, r3, #4
 8004b98:	6030      	str	r0, [r6, #0]
 8004b9a:	062e      	lsls	r6, r5, #24
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	d501      	bpl.n	8004ba4 <_printf_i+0x1c0>
 8004ba0:	6019      	str	r1, [r3, #0]
 8004ba2:	e002      	b.n	8004baa <_printf_i+0x1c6>
 8004ba4:	0668      	lsls	r0, r5, #25
 8004ba6:	d5fb      	bpl.n	8004ba0 <_printf_i+0x1bc>
 8004ba8:	8019      	strh	r1, [r3, #0]
 8004baa:	2300      	movs	r3, #0
 8004bac:	6123      	str	r3, [r4, #16]
 8004bae:	4616      	mov	r6, r2
 8004bb0:	e7bc      	b.n	8004b2c <_printf_i+0x148>
 8004bb2:	6833      	ldr	r3, [r6, #0]
 8004bb4:	1d1a      	adds	r2, r3, #4
 8004bb6:	6032      	str	r2, [r6, #0]
 8004bb8:	681e      	ldr	r6, [r3, #0]
 8004bba:	6862      	ldr	r2, [r4, #4]
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	f7fb fb16 	bl	80001f0 <memchr>
 8004bc4:	b108      	cbz	r0, 8004bca <_printf_i+0x1e6>
 8004bc6:	1b80      	subs	r0, r0, r6
 8004bc8:	6060      	str	r0, [r4, #4]
 8004bca:	6863      	ldr	r3, [r4, #4]
 8004bcc:	6123      	str	r3, [r4, #16]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bd4:	e7aa      	b.n	8004b2c <_printf_i+0x148>
 8004bd6:	6923      	ldr	r3, [r4, #16]
 8004bd8:	4632      	mov	r2, r6
 8004bda:	4649      	mov	r1, r9
 8004bdc:	4640      	mov	r0, r8
 8004bde:	47d0      	blx	sl
 8004be0:	3001      	adds	r0, #1
 8004be2:	d0ad      	beq.n	8004b40 <_printf_i+0x15c>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	079b      	lsls	r3, r3, #30
 8004be8:	d413      	bmi.n	8004c12 <_printf_i+0x22e>
 8004bea:	68e0      	ldr	r0, [r4, #12]
 8004bec:	9b03      	ldr	r3, [sp, #12]
 8004bee:	4298      	cmp	r0, r3
 8004bf0:	bfb8      	it	lt
 8004bf2:	4618      	movlt	r0, r3
 8004bf4:	e7a6      	b.n	8004b44 <_printf_i+0x160>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	4632      	mov	r2, r6
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	4640      	mov	r0, r8
 8004bfe:	47d0      	blx	sl
 8004c00:	3001      	adds	r0, #1
 8004c02:	d09d      	beq.n	8004b40 <_printf_i+0x15c>
 8004c04:	3501      	adds	r5, #1
 8004c06:	68e3      	ldr	r3, [r4, #12]
 8004c08:	9903      	ldr	r1, [sp, #12]
 8004c0a:	1a5b      	subs	r3, r3, r1
 8004c0c:	42ab      	cmp	r3, r5
 8004c0e:	dcf2      	bgt.n	8004bf6 <_printf_i+0x212>
 8004c10:	e7eb      	b.n	8004bea <_printf_i+0x206>
 8004c12:	2500      	movs	r5, #0
 8004c14:	f104 0619 	add.w	r6, r4, #25
 8004c18:	e7f5      	b.n	8004c06 <_printf_i+0x222>
 8004c1a:	bf00      	nop
 8004c1c:	08005040 	.word	0x08005040
 8004c20:	08005051 	.word	0x08005051

08004c24 <__swbuf_r>:
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	460e      	mov	r6, r1
 8004c28:	4614      	mov	r4, r2
 8004c2a:	4605      	mov	r5, r0
 8004c2c:	b118      	cbz	r0, 8004c36 <__swbuf_r+0x12>
 8004c2e:	6a03      	ldr	r3, [r0, #32]
 8004c30:	b90b      	cbnz	r3, 8004c36 <__swbuf_r+0x12>
 8004c32:	f7ff fa3f 	bl	80040b4 <__sinit>
 8004c36:	69a3      	ldr	r3, [r4, #24]
 8004c38:	60a3      	str	r3, [r4, #8]
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	071a      	lsls	r2, r3, #28
 8004c3e:	d501      	bpl.n	8004c44 <__swbuf_r+0x20>
 8004c40:	6923      	ldr	r3, [r4, #16]
 8004c42:	b943      	cbnz	r3, 8004c56 <__swbuf_r+0x32>
 8004c44:	4621      	mov	r1, r4
 8004c46:	4628      	mov	r0, r5
 8004c48:	f000 f82a 	bl	8004ca0 <__swsetup_r>
 8004c4c:	b118      	cbz	r0, 8004c56 <__swbuf_r+0x32>
 8004c4e:	f04f 37ff 	mov.w	r7, #4294967295
 8004c52:	4638      	mov	r0, r7
 8004c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	6922      	ldr	r2, [r4, #16]
 8004c5a:	1a98      	subs	r0, r3, r2
 8004c5c:	6963      	ldr	r3, [r4, #20]
 8004c5e:	b2f6      	uxtb	r6, r6
 8004c60:	4283      	cmp	r3, r0
 8004c62:	4637      	mov	r7, r6
 8004c64:	dc05      	bgt.n	8004c72 <__swbuf_r+0x4e>
 8004c66:	4621      	mov	r1, r4
 8004c68:	4628      	mov	r0, r5
 8004c6a:	f7ff fcbb 	bl	80045e4 <_fflush_r>
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d1ed      	bne.n	8004c4e <__swbuf_r+0x2a>
 8004c72:	68a3      	ldr	r3, [r4, #8]
 8004c74:	3b01      	subs	r3, #1
 8004c76:	60a3      	str	r3, [r4, #8]
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	6022      	str	r2, [r4, #0]
 8004c7e:	701e      	strb	r6, [r3, #0]
 8004c80:	6962      	ldr	r2, [r4, #20]
 8004c82:	1c43      	adds	r3, r0, #1
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d004      	beq.n	8004c92 <__swbuf_r+0x6e>
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	07db      	lsls	r3, r3, #31
 8004c8c:	d5e1      	bpl.n	8004c52 <__swbuf_r+0x2e>
 8004c8e:	2e0a      	cmp	r6, #10
 8004c90:	d1df      	bne.n	8004c52 <__swbuf_r+0x2e>
 8004c92:	4621      	mov	r1, r4
 8004c94:	4628      	mov	r0, r5
 8004c96:	f7ff fca5 	bl	80045e4 <_fflush_r>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	d0d9      	beq.n	8004c52 <__swbuf_r+0x2e>
 8004c9e:	e7d6      	b.n	8004c4e <__swbuf_r+0x2a>

08004ca0 <__swsetup_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	4b29      	ldr	r3, [pc, #164]	@ (8004d48 <__swsetup_r+0xa8>)
 8004ca4:	4605      	mov	r5, r0
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	460c      	mov	r4, r1
 8004caa:	b118      	cbz	r0, 8004cb4 <__swsetup_r+0x14>
 8004cac:	6a03      	ldr	r3, [r0, #32]
 8004cae:	b90b      	cbnz	r3, 8004cb4 <__swsetup_r+0x14>
 8004cb0:	f7ff fa00 	bl	80040b4 <__sinit>
 8004cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cb8:	0719      	lsls	r1, r3, #28
 8004cba:	d422      	bmi.n	8004d02 <__swsetup_r+0x62>
 8004cbc:	06da      	lsls	r2, r3, #27
 8004cbe:	d407      	bmi.n	8004cd0 <__swsetup_r+0x30>
 8004cc0:	2209      	movs	r2, #9
 8004cc2:	602a      	str	r2, [r5, #0]
 8004cc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cc8:	81a3      	strh	r3, [r4, #12]
 8004cca:	f04f 30ff 	mov.w	r0, #4294967295
 8004cce:	e033      	b.n	8004d38 <__swsetup_r+0x98>
 8004cd0:	0758      	lsls	r0, r3, #29
 8004cd2:	d512      	bpl.n	8004cfa <__swsetup_r+0x5a>
 8004cd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cd6:	b141      	cbz	r1, 8004cea <__swsetup_r+0x4a>
 8004cd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cdc:	4299      	cmp	r1, r3
 8004cde:	d002      	beq.n	8004ce6 <__swsetup_r+0x46>
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	f7ff fafb 	bl	80042dc <_free_r>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004cea:	89a3      	ldrh	r3, [r4, #12]
 8004cec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004cf0:	81a3      	strh	r3, [r4, #12]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	6063      	str	r3, [r4, #4]
 8004cf6:	6923      	ldr	r3, [r4, #16]
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	89a3      	ldrh	r3, [r4, #12]
 8004cfc:	f043 0308 	orr.w	r3, r3, #8
 8004d00:	81a3      	strh	r3, [r4, #12]
 8004d02:	6923      	ldr	r3, [r4, #16]
 8004d04:	b94b      	cbnz	r3, 8004d1a <__swsetup_r+0x7a>
 8004d06:	89a3      	ldrh	r3, [r4, #12]
 8004d08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d10:	d003      	beq.n	8004d1a <__swsetup_r+0x7a>
 8004d12:	4621      	mov	r1, r4
 8004d14:	4628      	mov	r0, r5
 8004d16:	f000 f883 	bl	8004e20 <__smakebuf_r>
 8004d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d1e:	f013 0201 	ands.w	r2, r3, #1
 8004d22:	d00a      	beq.n	8004d3a <__swsetup_r+0x9a>
 8004d24:	2200      	movs	r2, #0
 8004d26:	60a2      	str	r2, [r4, #8]
 8004d28:	6962      	ldr	r2, [r4, #20]
 8004d2a:	4252      	negs	r2, r2
 8004d2c:	61a2      	str	r2, [r4, #24]
 8004d2e:	6922      	ldr	r2, [r4, #16]
 8004d30:	b942      	cbnz	r2, 8004d44 <__swsetup_r+0xa4>
 8004d32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004d36:	d1c5      	bne.n	8004cc4 <__swsetup_r+0x24>
 8004d38:	bd38      	pop	{r3, r4, r5, pc}
 8004d3a:	0799      	lsls	r1, r3, #30
 8004d3c:	bf58      	it	pl
 8004d3e:	6962      	ldrpl	r2, [r4, #20]
 8004d40:	60a2      	str	r2, [r4, #8]
 8004d42:	e7f4      	b.n	8004d2e <__swsetup_r+0x8e>
 8004d44:	2000      	movs	r0, #0
 8004d46:	e7f7      	b.n	8004d38 <__swsetup_r+0x98>
 8004d48:	20000040 	.word	0x20000040

08004d4c <_raise_r>:
 8004d4c:	291f      	cmp	r1, #31
 8004d4e:	b538      	push	{r3, r4, r5, lr}
 8004d50:	4605      	mov	r5, r0
 8004d52:	460c      	mov	r4, r1
 8004d54:	d904      	bls.n	8004d60 <_raise_r+0x14>
 8004d56:	2316      	movs	r3, #22
 8004d58:	6003      	str	r3, [r0, #0]
 8004d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004d62:	b112      	cbz	r2, 8004d6a <_raise_r+0x1e>
 8004d64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004d68:	b94b      	cbnz	r3, 8004d7e <_raise_r+0x32>
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f000 f830 	bl	8004dd0 <_getpid_r>
 8004d70:	4622      	mov	r2, r4
 8004d72:	4601      	mov	r1, r0
 8004d74:	4628      	mov	r0, r5
 8004d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d7a:	f000 b817 	b.w	8004dac <_kill_r>
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d00a      	beq.n	8004d98 <_raise_r+0x4c>
 8004d82:	1c59      	adds	r1, r3, #1
 8004d84:	d103      	bne.n	8004d8e <_raise_r+0x42>
 8004d86:	2316      	movs	r3, #22
 8004d88:	6003      	str	r3, [r0, #0]
 8004d8a:	2001      	movs	r0, #1
 8004d8c:	e7e7      	b.n	8004d5e <_raise_r+0x12>
 8004d8e:	2100      	movs	r1, #0
 8004d90:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004d94:	4620      	mov	r0, r4
 8004d96:	4798      	blx	r3
 8004d98:	2000      	movs	r0, #0
 8004d9a:	e7e0      	b.n	8004d5e <_raise_r+0x12>

08004d9c <raise>:
 8004d9c:	4b02      	ldr	r3, [pc, #8]	@ (8004da8 <raise+0xc>)
 8004d9e:	4601      	mov	r1, r0
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	f7ff bfd3 	b.w	8004d4c <_raise_r>
 8004da6:	bf00      	nop
 8004da8:	20000040 	.word	0x20000040

08004dac <_kill_r>:
 8004dac:	b538      	push	{r3, r4, r5, lr}
 8004dae:	4d07      	ldr	r5, [pc, #28]	@ (8004dcc <_kill_r+0x20>)
 8004db0:	2300      	movs	r3, #0
 8004db2:	4604      	mov	r4, r0
 8004db4:	4608      	mov	r0, r1
 8004db6:	4611      	mov	r1, r2
 8004db8:	602b      	str	r3, [r5, #0]
 8004dba:	f7fc fed2 	bl	8001b62 <_kill>
 8004dbe:	1c43      	adds	r3, r0, #1
 8004dc0:	d102      	bne.n	8004dc8 <_kill_r+0x1c>
 8004dc2:	682b      	ldr	r3, [r5, #0]
 8004dc4:	b103      	cbz	r3, 8004dc8 <_kill_r+0x1c>
 8004dc6:	6023      	str	r3, [r4, #0]
 8004dc8:	bd38      	pop	{r3, r4, r5, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000290 	.word	0x20000290

08004dd0 <_getpid_r>:
 8004dd0:	f7fc bebf 	b.w	8001b52 <_getpid>

08004dd4 <__swhatbuf_r>:
 8004dd4:	b570      	push	{r4, r5, r6, lr}
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ddc:	2900      	cmp	r1, #0
 8004dde:	b096      	sub	sp, #88	@ 0x58
 8004de0:	4615      	mov	r5, r2
 8004de2:	461e      	mov	r6, r3
 8004de4:	da0d      	bge.n	8004e02 <__swhatbuf_r+0x2e>
 8004de6:	89a3      	ldrh	r3, [r4, #12]
 8004de8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004dec:	f04f 0100 	mov.w	r1, #0
 8004df0:	bf14      	ite	ne
 8004df2:	2340      	movne	r3, #64	@ 0x40
 8004df4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004df8:	2000      	movs	r0, #0
 8004dfa:	6031      	str	r1, [r6, #0]
 8004dfc:	602b      	str	r3, [r5, #0]
 8004dfe:	b016      	add	sp, #88	@ 0x58
 8004e00:	bd70      	pop	{r4, r5, r6, pc}
 8004e02:	466a      	mov	r2, sp
 8004e04:	f000 f848 	bl	8004e98 <_fstat_r>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	dbec      	blt.n	8004de6 <__swhatbuf_r+0x12>
 8004e0c:	9901      	ldr	r1, [sp, #4]
 8004e0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004e12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004e16:	4259      	negs	r1, r3
 8004e18:	4159      	adcs	r1, r3
 8004e1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e1e:	e7eb      	b.n	8004df8 <__swhatbuf_r+0x24>

08004e20 <__smakebuf_r>:
 8004e20:	898b      	ldrh	r3, [r1, #12]
 8004e22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e24:	079d      	lsls	r5, r3, #30
 8004e26:	4606      	mov	r6, r0
 8004e28:	460c      	mov	r4, r1
 8004e2a:	d507      	bpl.n	8004e3c <__smakebuf_r+0x1c>
 8004e2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	6123      	str	r3, [r4, #16]
 8004e34:	2301      	movs	r3, #1
 8004e36:	6163      	str	r3, [r4, #20]
 8004e38:	b003      	add	sp, #12
 8004e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e3c:	ab01      	add	r3, sp, #4
 8004e3e:	466a      	mov	r2, sp
 8004e40:	f7ff ffc8 	bl	8004dd4 <__swhatbuf_r>
 8004e44:	9f00      	ldr	r7, [sp, #0]
 8004e46:	4605      	mov	r5, r0
 8004e48:	4639      	mov	r1, r7
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	f7ff faba 	bl	80043c4 <_malloc_r>
 8004e50:	b948      	cbnz	r0, 8004e66 <__smakebuf_r+0x46>
 8004e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e56:	059a      	lsls	r2, r3, #22
 8004e58:	d4ee      	bmi.n	8004e38 <__smakebuf_r+0x18>
 8004e5a:	f023 0303 	bic.w	r3, r3, #3
 8004e5e:	f043 0302 	orr.w	r3, r3, #2
 8004e62:	81a3      	strh	r3, [r4, #12]
 8004e64:	e7e2      	b.n	8004e2c <__smakebuf_r+0xc>
 8004e66:	89a3      	ldrh	r3, [r4, #12]
 8004e68:	6020      	str	r0, [r4, #0]
 8004e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e6e:	81a3      	strh	r3, [r4, #12]
 8004e70:	9b01      	ldr	r3, [sp, #4]
 8004e72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004e76:	b15b      	cbz	r3, 8004e90 <__smakebuf_r+0x70>
 8004e78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	f000 f81d 	bl	8004ebc <_isatty_r>
 8004e82:	b128      	cbz	r0, 8004e90 <__smakebuf_r+0x70>
 8004e84:	89a3      	ldrh	r3, [r4, #12]
 8004e86:	f023 0303 	bic.w	r3, r3, #3
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	81a3      	strh	r3, [r4, #12]
 8004e90:	89a3      	ldrh	r3, [r4, #12]
 8004e92:	431d      	orrs	r5, r3
 8004e94:	81a5      	strh	r5, [r4, #12]
 8004e96:	e7cf      	b.n	8004e38 <__smakebuf_r+0x18>

08004e98 <_fstat_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4d07      	ldr	r5, [pc, #28]	@ (8004eb8 <_fstat_r+0x20>)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	602b      	str	r3, [r5, #0]
 8004ea6:	f7fc febc 	bl	8001c22 <_fstat>
 8004eaa:	1c43      	adds	r3, r0, #1
 8004eac:	d102      	bne.n	8004eb4 <_fstat_r+0x1c>
 8004eae:	682b      	ldr	r3, [r5, #0]
 8004eb0:	b103      	cbz	r3, 8004eb4 <_fstat_r+0x1c>
 8004eb2:	6023      	str	r3, [r4, #0]
 8004eb4:	bd38      	pop	{r3, r4, r5, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000290 	.word	0x20000290

08004ebc <_isatty_r>:
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	4d06      	ldr	r5, [pc, #24]	@ (8004ed8 <_isatty_r+0x1c>)
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	4608      	mov	r0, r1
 8004ec6:	602b      	str	r3, [r5, #0]
 8004ec8:	f7fc febb 	bl	8001c42 <_isatty>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d102      	bne.n	8004ed6 <_isatty_r+0x1a>
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	b103      	cbz	r3, 8004ed6 <_isatty_r+0x1a>
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}
 8004ed8:	20000290 	.word	0x20000290

08004edc <_init>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	bf00      	nop
 8004ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee2:	bc08      	pop	{r3}
 8004ee4:	469e      	mov	lr, r3
 8004ee6:	4770      	bx	lr

08004ee8 <_fini>:
 8004ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eea:	bf00      	nop
 8004eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eee:	bc08      	pop	{r3}
 8004ef0:	469e      	mov	lr, r3
 8004ef2:	4770      	bx	lr
